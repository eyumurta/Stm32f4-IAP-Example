
IAP_Deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002100  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  08002298  08002298  00012298  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028f8  080028f8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080028f8  080028f8  000128f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002900  08002900  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002900  08002900  00012900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002904  08002904  00012904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  20000014  0800291c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  0800291c  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d67a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002814  00000000  00000000  0002d6be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000740d  00000000  00000000  0002fed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000750  00000000  00000000  000372e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a08  00000000  00000000  00037a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000166de  00000000  00000000  00038438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e504  00000000  00000000  0004eb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086fc7  00000000  00000000  0005d01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e3fe1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001278  00000000  00000000  000e4034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002280 	.word	0x08002280

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08002280 	.word	0x08002280

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b510      	push	{r4, lr}
 80004f2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f4:	2214      	movs	r2, #20
 80004f6:	2100      	movs	r1, #0
 80004f8:	a809      	add	r0, sp, #36	; 0x24
 80004fa:	f001 feb9 	bl	8002270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fe:	2214      	movs	r2, #20
 8000500:	2100      	movs	r1, #0
 8000502:	a803      	add	r0, sp, #12
 8000504:	f001 feb4 	bl	8002270 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000508:	2300      	movs	r3, #0
 800050a:	4a1e      	ldr	r2, [pc, #120]	; (8000584 <SystemClock_Config+0x94>)
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000510:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000514:	6411      	str	r1, [r2, #64]	; 0x40
 8000516:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000518:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800051c:	9201      	str	r2, [sp, #4]
 800051e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000520:	4a19      	ldr	r2, [pc, #100]	; (8000588 <SystemClock_Config+0x98>)
 8000522:	9302      	str	r3, [sp, #8]
 8000524:	6811      	ldr	r1, [r2, #0]
 8000526:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800052a:	6011      	str	r1, [r2, #0]
 800052c:	6812      	ldr	r2, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052e:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000534:	f44f 70a8 	mov.w	r0, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000538:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800053e:	2304      	movs	r3, #4
 8000540:	e9cd 0311 	strd	r0, r3, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000544:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000546:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000548:	2210      	movs	r2, #16
 800054a:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054e:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000552:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000554:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f000 fd75 	bl	8001044 <HAL_RCC_OscConfig>
 800055a:	b108      	cbz	r0, 8000560 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800055e:	e7fe      	b.n	800055e <SystemClock_Config+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000560:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000562:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056a:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056e:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000570:	4621      	mov	r1, r4
 8000572:	a803      	add	r0, sp, #12
 8000574:	f000 ff44 	bl	8001400 <HAL_RCC_ClockConfig>
 8000578:	b108      	cbz	r0, 800057e <SystemClock_Config+0x8e>
 800057a:	b672      	cpsid	i
  while (1)
 800057c:	e7fe      	b.n	800057c <SystemClock_Config+0x8c>
}
 800057e:	b014      	add	sp, #80	; 0x50
 8000580:	bd10      	pop	{r4, pc}
 8000582:	bf00      	nop
 8000584:	40023800 	.word	0x40023800
 8000588:	40007000 	.word	0x40007000

0800058c <main>:
{
 800058c:	b500      	push	{lr}
 800058e:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000590:	f000 f984 	bl	800089c <HAL_Init>
  SystemClock_Config();
 8000594:	f7ff ffac 	bl	80004f0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	2214      	movs	r2, #20
 800059a:	2100      	movs	r1, #0
 800059c:	eb0d 0002 	add.w	r0, sp, r2
 80005a0:	f001 fe66 	bl	8002270 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a4:	2400      	movs	r4, #0
 80005a6:	4b47      	ldr	r3, [pc, #284]	; (80006c4 <main+0x138>)
 80005a8:	9401      	str	r4, [sp, #4]
 80005aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ac:	4846      	ldr	r0, [pc, #280]	; (80006c8 <main+0x13c>)
  huart2.Instance = USART2;
 80005ae:	4d47      	ldr	r5, [pc, #284]	; (80006cc <main+0x140>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b0:	f042 0204 	orr.w	r2, r2, #4
 80005b4:	631a      	str	r2, [r3, #48]	; 0x30
 80005b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b8:	f002 0204 	and.w	r2, r2, #4
 80005bc:	9201      	str	r2, [sp, #4]
 80005be:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c0:	9402      	str	r4, [sp, #8]
 80005c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005c8:	631a      	str	r2, [r3, #48]	; 0x30
 80005ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005cc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005d0:	9202      	str	r2, [sp, #8]
 80005d2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d4:	9403      	str	r4, [sp, #12]
 80005d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d8:	f042 0201 	orr.w	r2, r2, #1
 80005dc:	631a      	str	r2, [r3, #48]	; 0x30
 80005de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e0:	f002 0201 	and.w	r2, r2, #1
 80005e4:	9203      	str	r2, [sp, #12]
 80005e6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e8:	9404      	str	r4, [sp, #16]
 80005ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ec:	f042 0202 	orr.w	r2, r2, #2
 80005f0:	631a      	str	r2, [r3, #48]	; 0x30
 80005f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f4:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005f8:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005fc:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000600:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000604:	f000 fd18 	bl	8001038 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000608:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800060c:	4830      	ldr	r0, [pc, #192]	; (80006d0 <main+0x144>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000610:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000612:	e9cd 6305 	strd	r6, r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000616:	f000 fc41 	bl	8000e9c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800061c:	482a      	ldr	r0, [pc, #168]	; (80006c8 <main+0x13c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2220      	movs	r2, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000620:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800062a:	f000 fc37 	bl	8000e9c <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 800062e:	4929      	ldr	r1, [pc, #164]	; (80006d4 <main+0x148>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8000630:	612c      	str	r4, [r5, #16]
  huart2.Init.BaudRate = 115200;
 8000632:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000636:	e9c5 1300 	strd	r1, r3, [r5]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063a:	4628      	mov	r0, r5
  huart2.Init.Mode = UART_MODE_TX_RX;
 800063c:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800063e:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	e9c5 3405 	strd	r3, r4, [r5, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000646:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000648:	f001 f82a 	bl	80016a0 <HAL_UART_Init>
 800064c:	b108      	cbz	r0, 8000652 <main+0xc6>
 800064e:	b672      	cpsid	i
  while (1)
 8000650:	e7fe      	b.n	8000650 <main+0xc4>
  hcrc.Instance = CRC;
 8000652:	4821      	ldr	r0, [pc, #132]	; (80006d8 <main+0x14c>)
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <main+0x150>)
 8000656:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000658:	f000 f9b8 	bl	80009cc <HAL_CRC_Init>
 800065c:	b108      	cbz	r0, 8000662 <main+0xd6>
 800065e:	b672      	cpsid	i
  while (1)
 8000660:	e7fe      	b.n	8000660 <main+0xd4>
  	 if ( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000662:	481b      	ldr	r0, [pc, #108]	; (80006d0 <main+0x144>)
 8000664:	4631      	mov	r1, r6
 8000666:	f000 fce1 	bl	800102c <HAL_GPIO_ReadPin>
 800066a:	bb00      	cbnz	r0, 80006ae <main+0x122>
  		 FLASH_If_Init();
 800066c:	f001 f98a 	bl	8001984 <FLASH_If_Init>
  		Serial_PutString("\r\nPlease Enter to Password ");
 8000670:	481b      	ldr	r0, [pc, #108]	; (80006e0 <main+0x154>)
  		 if(HAL_UART_Receive(&huart2, buffer, sizeof(password), HAL_MAX_DELAY)==HAL_OK){
 8000672:	4c1c      	ldr	r4, [pc, #112]	; (80006e4 <main+0x158>)
  			 if(strcmp(buffer,password)==0)
 8000674:	4e1c      	ldr	r6, [pc, #112]	; (80006e8 <main+0x15c>)
  		Serial_PutString("\r\nPlease Enter to Password ");
 8000676:	f001 f95f 	bl	8001938 <Serial_PutString>
  		 if(HAL_UART_Receive(&huart2, buffer, sizeof(password), HAL_MAX_DELAY)==HAL_OK){
 800067a:	491a      	ldr	r1, [pc, #104]	; (80006e4 <main+0x158>)
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	2207      	movs	r2, #7
 8000682:	4628      	mov	r0, r5
 8000684:	f001 f88f 	bl	80017a6 <HAL_UART_Receive>
 8000688:	b948      	cbnz	r0, 800069e <main+0x112>
  			 if(strcmp(buffer,password)==0)
 800068a:	4631      	mov	r1, r6
 800068c:	4620      	mov	r0, r4
 800068e:	f7ff fda3 	bl	80001d8 <strcmp>
 8000692:	b928      	cbnz	r0, 80006a0 <main+0x114>
  			 { Serial_PutString("\r\nAthenticatioon Accepted ");
 8000694:	4815      	ldr	r0, [pc, #84]	; (80006ec <main+0x160>)
 8000696:	f001 f94f 	bl	8001938 <Serial_PutString>
  			  	    Main_Menu ();
 800069a:	f001 fa71 	bl	8001b80 <Main_Menu>
  while (1)
 800069e:	e7fe      	b.n	800069e <main+0x112>
  				Serial_PutString("\r\nAthenticatioon Failed ");
 80006a0:	4813      	ldr	r0, [pc, #76]	; (80006f0 <main+0x164>)
 80006a2:	f001 f949 	bl	8001938 <Serial_PutString>
  				Serial_PutString("\r\nPlease Enter to Password ");
 80006a6:	480e      	ldr	r0, [pc, #56]	; (80006e0 <main+0x154>)
 80006a8:	f001 f946 	bl	8001938 <Serial_PutString>
  				goto label;
 80006ac:	e7e5      	b.n	800067a <main+0xee>
  	      JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <main+0x168>)
 80006b0:	4911      	ldr	r1, [pc, #68]	; (80006f8 <main+0x16c>)
 80006b2:	6853      	ldr	r3, [r2, #4]
 80006b4:	600b      	str	r3, [r1, #0]
  	      JumpToApplication = (pFunction) JumpAddress;
 80006b6:	4911      	ldr	r1, [pc, #68]	; (80006fc <main+0x170>)
  	      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 80006b8:	6812      	ldr	r2, [r2, #0]
  	      JumpToApplication = (pFunction) JumpAddress;
 80006ba:	600b      	str	r3, [r1, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80006bc:	f382 8808 	msr	MSP, r2
  	      JumpToApplication();
 80006c0:	4798      	blx	r3
 80006c2:	e7ec      	b.n	800069e <main+0x112>
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40020000 	.word	0x40020000
 80006cc:	20000040 	.word	0x20000040
 80006d0:	40020800 	.word	0x40020800
 80006d4:	40004400 	.word	0x40004400
 80006d8:	20000038 	.word	0x20000038
 80006dc:	40023000 	.word	0x40023000
 80006e0:	08002298 	.word	0x08002298
 80006e4:	20000030 	.word	0x20000030
 80006e8:	20000000 	.word	0x20000000
 80006ec:	080022b4 	.word	0x080022b4
 80006f0:	080022cf 	.word	0x080022cf
 80006f4:	08004000 	.word	0x08004000
 80006f8:	200000ac 	.word	0x200000ac
 80006fc:	200000b0 	.word	0x200000b0

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <HAL_MspInit+0x38>)
 8000704:	2100      	movs	r1, #0
 8000706:	9100      	str	r1, [sp, #0]
 8000708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800070a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800070e:	645a      	str	r2, [r3, #68]	; 0x44
 8000710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000712:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000716:	9200      	str	r2, [sp, #0]
 8000718:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	9101      	str	r1, [sp, #4]
 800071c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800071e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000722:	641a      	str	r2, [r3, #64]	; 0x40
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	9301      	str	r3, [sp, #4]
 800072c:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800072e:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000730:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000732:	f000 b8f3 	b.w	800091c <HAL_NVIC_SetPriorityGrouping>
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800

0800073c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800073c:	6802      	ldr	r2, [r0, #0]
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_CRC_MspInit+0x28>)
 8000740:	429a      	cmp	r2, r3
{
 8000742:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000744:	d10b      	bne.n	800075e <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	9301      	str	r3, [sp, #4]
 800074a:	4b07      	ldr	r3, [pc, #28]	; (8000768 <HAL_CRC_MspInit+0x2c>)
 800074c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800074e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000752:	631a      	str	r2, [r3, #48]	; 0x30
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800075e:	b002      	add	sp, #8
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023000 	.word	0x40023000
 8000768:	40023800 	.word	0x40023800

0800076c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800076c:	b510      	push	{r4, lr}
 800076e:	4604      	mov	r4, r0
 8000770:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	2214      	movs	r2, #20
 8000774:	2100      	movs	r1, #0
 8000776:	a803      	add	r0, sp, #12
 8000778:	f001 fd7a 	bl	8002270 <memset>
  if(huart->Instance==USART2)
 800077c:	6822      	ldr	r2, [r4, #0]
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <HAL_UART_MspInit+0x64>)
 8000780:	429a      	cmp	r2, r3
 8000782:	d122      	bne.n	80007ca <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000784:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000788:	2100      	movs	r1, #0
 800078a:	9101      	str	r1, [sp, #4]
 800078c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	4811      	ldr	r0, [pc, #68]	; (80007d4 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000790:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000794:	641a      	str	r2, [r3, #64]	; 0x40
 8000796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000798:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800079c:	9201      	str	r2, [sp, #4]
 800079e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a0:	9102      	str	r1, [sp, #8]
 80007a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007a4:	f042 0201 	orr.w	r2, r2, #1
 80007a8:	631a      	str	r2, [r3, #48]	; 0x30
 80007aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ac:	f003 0301 	and.w	r3, r3, #1
 80007b0:	9302      	str	r3, [sp, #8]
 80007b2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	220c      	movs	r2, #12
 80007b6:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007b8:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007be:	2307      	movs	r3, #7
 80007c0:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	a903      	add	r1, sp, #12
 80007c6:	f000 fb69 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ca:	b008      	add	sp, #32
 80007cc:	bd10      	pop	{r4, pc}
 80007ce:	bf00      	nop
 80007d0:	40004400 	.word	0x40004400
 80007d4:	40020000 	.word	0x40020000

080007d8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <NMI_Handler>

080007da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <HardFault_Handler>

080007dc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <MemManage_Handler>

080007de <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <BusFault_Handler>

080007e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <UsageFault_Handler>

080007e2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e2:	4770      	bx	lr

080007e4 <DebugMon_Handler>:
 80007e4:	4770      	bx	lr

080007e6 <PendSV_Handler>:
 80007e6:	4770      	bx	lr

080007e8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e8:	f000 b872 	b.w	80008d0 <HAL_IncTick>

080007ec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007ec:	4a03      	ldr	r2, [pc, #12]	; (80007fc <SystemInit+0x10>)
 80007ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80007f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007fa:	4770      	bx	lr
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000838 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000806:	490e      	ldr	r1, [pc, #56]	; (8000840 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000808:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800080c:	e002      	b.n	8000814 <LoopCopyDataInit>

0800080e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000812:	3304      	adds	r3, #4

08000814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000818:	d3f9      	bcc.n	800080e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081a:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800081c:	4c0b      	ldr	r4, [pc, #44]	; (800084c <LoopFillZerobss+0x26>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000820:	e001      	b.n	8000826 <LoopFillZerobss>

08000822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000824:	3204      	adds	r2, #4

08000826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000828:	d3fb      	bcc.n	8000822 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800082a:	f7ff ffdf 	bl	80007ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800082e:	f001 fcfb 	bl	8002228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000832:	f7ff feab 	bl	800058c <main>
  bx  lr    
 8000836:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000838:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800083c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000840:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000844:	08002908 	.word	0x08002908
  ldr r2, =_sbss
 8000848:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800084c:	200004fc 	.word	0x200004fc

08000850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC_IRQHandler>
	...

08000854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_InitTick+0x3c>)
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_InitTick+0x40>)
{
 800085a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800085c:	7818      	ldrb	r0, [r3, #0]
 800085e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000862:	fbb3 f3f0 	udiv	r3, r3, r0
 8000866:	6810      	ldr	r0, [r2, #0]
 8000868:	fbb0 f0f3 	udiv	r0, r0, r3
 800086c:	f000 f89a 	bl	80009a4 <HAL_SYSTICK_Config>
 8000870:	4604      	mov	r4, r0
 8000872:	b958      	cbnz	r0, 800088c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000874:	2d0f      	cmp	r5, #15
 8000876:	d809      	bhi.n	800088c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000878:	4602      	mov	r2, r0
 800087a:	4629      	mov	r1, r5
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f000 f85e 	bl	8000940 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <HAL_InitTick+0x44>)
 8000886:	4620      	mov	r0, r4
 8000888:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800088a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800088c:	2001      	movs	r0, #1
 800088e:	e7fc      	b.n	800088a <HAL_InitTick+0x36>
 8000890:	20000008 	.word	0x20000008
 8000894:	2000000c 	.word	0x2000000c
 8000898:	20000010 	.word	0x20000010

0800089c <HAL_Init>:
{
 800089c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <HAL_Init+0x30>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008a6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80008ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008b6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f82f 	bl	800091c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff ffc8 	bl	8000854 <HAL_InitTick>
  HAL_MspInit();
 80008c4:	f7ff ff1c 	bl	8000700 <HAL_MspInit>
}
 80008c8:	2000      	movs	r0, #0
 80008ca:	bd08      	pop	{r3, pc}
 80008cc:	40023c00 	.word	0x40023c00

080008d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80008d0:	4a03      	ldr	r2, [pc, #12]	; (80008e0 <HAL_IncTick+0x10>)
 80008d2:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <HAL_IncTick+0x14>)
 80008d4:	6811      	ldr	r1, [r2, #0]
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	440b      	add	r3, r1
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000084 	.word	0x20000084
 80008e4:	2000000c 	.word	0x2000000c

080008e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008e8:	4b01      	ldr	r3, [pc, #4]	; (80008f0 <HAL_GetTick+0x8>)
 80008ea:	6818      	ldr	r0, [r3, #0]
}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000084 	.word	0x20000084

080008f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f4:	b538      	push	{r3, r4, r5, lr}
 80008f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008f8:	f7ff fff6 	bl	80008e8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008fc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80008fe:	bf1c      	itt	ne
 8000900:	4b05      	ldrne	r3, [pc, #20]	; (8000918 <HAL_Delay+0x24>)
 8000902:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000904:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000906:	bf18      	it	ne
 8000908:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800090a:	f7ff ffed 	bl	80008e8 <HAL_GetTick>
 800090e:	1b43      	subs	r3, r0, r5
 8000910:	42a3      	cmp	r3, r4
 8000912:	d3fa      	bcc.n	800090a <HAL_Delay+0x16>
  {
  }
}
 8000914:	bd38      	pop	{r3, r4, r5, pc}
 8000916:	bf00      	nop
 8000918:	2000000c 	.word	0x2000000c

0800091c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800091c:	4907      	ldr	r1, [pc, #28]	; (800093c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800091e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000920:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000924:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000926:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000928:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800092e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000938:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000942:	b530      	push	{r4, r5, lr}
 8000944:	68dc      	ldr	r4, [r3, #12]
 8000946:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800094a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000950:	2d04      	cmp	r5, #4
 8000952:	bf28      	it	cs
 8000954:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000956:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095c:	bf8c      	ite	hi
 800095e:	3c03      	subhi	r4, #3
 8000960:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000962:	fa03 f505 	lsl.w	r5, r3, r5
 8000966:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800096a:	40a3      	lsls	r3, r4
 800096c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000972:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000978:	bfac      	ite	ge
 800097a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097e:	4a08      	ldrlt	r2, [pc, #32]	; (80009a0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000980:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	bfb8      	it	lt
 8000986:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098a:	b2db      	uxtb	r3, r3
 800098c:	bfaa      	itet	ge
 800098e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000992:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000994:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000998:	bd30      	pop	{r4, r5, pc}
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00
 80009a0:	e000ed14 	.word	0xe000ed14

080009a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a4:	3801      	subs	r0, #1
 80009a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009aa:	d20b      	bcs.n	80009c4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b0:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b2:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b4:	21f0      	movs	r1, #240	; 0xf0
 80009b6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ba:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009bc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009be:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009c4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009c6:	4770      	bx	lr
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80009cc:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80009ce:	4604      	mov	r4, r0
 80009d0:	b150      	cbz	r0, 80009e8 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80009d2:	7943      	ldrb	r3, [r0, #5]
 80009d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80009d8:	b913      	cbnz	r3, 80009e0 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80009da:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80009dc:	f7ff feae 	bl	800073c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80009e0:	2301      	movs	r3, #1
 80009e2:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80009e4:	2000      	movs	r0, #0
}
 80009e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80009e8:	2001      	movs	r0, #1
 80009ea:	e7fc      	b.n	80009e6 <HAL_CRC_Init+0x1a>

080009ec <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80009ec:	4909      	ldr	r1, [pc, #36]	; (8000a14 <FLASH_Program_DoubleWord+0x28>)
{
 80009ee:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80009f0:	690c      	ldr	r4, [r1, #16]
 80009f2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80009f6:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80009f8:	690c      	ldr	r4, [r1, #16]
 80009fa:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80009fe:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000a00:	690c      	ldr	r4, [r1, #16]
 8000a02:	f044 0401 	orr.w	r4, r4, #1
 8000a06:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000a08:	6002      	str	r2, [r0, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000a0a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000a0e:	6043      	str	r3, [r0, #4]
}
 8000a10:	bd10      	pop	{r4, pc}
 8000a12:	bf00      	nop
 8000a14:	40023c00 	.word	0x40023c00

08000a18 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <FLASH_Program_Word+0x20>)
 8000a1a:	691a      	ldr	r2, [r3, #16]
 8000a1c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000a20:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000a22:	691a      	ldr	r2, [r3, #16]
 8000a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a28:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000a2a:	691a      	ldr	r2, [r3, #16]
 8000a2c:	f042 0201 	orr.w	r2, r2, #1
 8000a30:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8000a32:	6001      	str	r1, [r0, #0]
}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023c00 	.word	0x40023c00

08000a3c <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <FLASH_Program_HalfWord+0x20>)
 8000a3e:	691a      	ldr	r2, [r3, #16]
 8000a40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000a44:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000a46:	691a      	ldr	r2, [r3, #16]
 8000a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a4c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000a4e:	691a      	ldr	r2, [r3, #16]
 8000a50:	f042 0201 	orr.w	r2, r2, #1
 8000a54:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8000a56:	8001      	strh	r1, [r0, #0]
}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40023c00 	.word	0x40023c00

08000a60 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <FLASH_SetErrorCode+0x84>)
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	06d0      	lsls	r0, r2, #27
 8000a66:	d506      	bpl.n	8000a76 <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000a68:	491f      	ldr	r1, [pc, #124]	; (8000ae8 <FLASH_SetErrorCode+0x88>)
 8000a6a:	69ca      	ldr	r2, [r1, #28]
 8000a6c:	f042 0210 	orr.w	r2, r2, #16
 8000a70:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000a72:	2210      	movs	r2, #16
 8000a74:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000a76:	68da      	ldr	r2, [r3, #12]
 8000a78:	0691      	lsls	r1, r2, #26
 8000a7a:	d506      	bpl.n	8000a8a <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000a7c:	491a      	ldr	r1, [pc, #104]	; (8000ae8 <FLASH_SetErrorCode+0x88>)
 8000a7e:	69ca      	ldr	r2, [r1, #28]
 8000a80:	f042 0208 	orr.w	r2, r2, #8
 8000a84:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000a86:	2220      	movs	r2, #32
 8000a88:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <FLASH_SetErrorCode+0x84>)
 8000a8c:	68da      	ldr	r2, [r3, #12]
 8000a8e:	0652      	lsls	r2, r2, #25
 8000a90:	d506      	bpl.n	8000aa0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000a92:	4915      	ldr	r1, [pc, #84]	; (8000ae8 <FLASH_SetErrorCode+0x88>)
 8000a94:	69ca      	ldr	r2, [r1, #28]
 8000a96:	f042 0204 	orr.w	r2, r2, #4
 8000a9a:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000a9c:	2240      	movs	r2, #64	; 0x40
 8000a9e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000aa0:	68da      	ldr	r2, [r3, #12]
 8000aa2:	0610      	lsls	r0, r2, #24
 8000aa4:	d506      	bpl.n	8000ab4 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000aa6:	4910      	ldr	r1, [pc, #64]	; (8000ae8 <FLASH_SetErrorCode+0x88>)
 8000aa8:	69ca      	ldr	r2, [r1, #28]
 8000aaa:	f042 0202 	orr.w	r2, r2, #2
 8000aae:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <FLASH_SetErrorCode+0x84>)
 8000ab6:	68da      	ldr	r2, [r3, #12]
 8000ab8:	05d1      	lsls	r1, r2, #23
 8000aba:	d507      	bpl.n	8000acc <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000abc:	490a      	ldr	r1, [pc, #40]	; (8000ae8 <FLASH_SetErrorCode+0x88>)
 8000abe:	69ca      	ldr	r2, [r1, #28]
 8000ac0:	f042 0201 	orr.w	r2, r2, #1
 8000ac4:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8000ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aca:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000acc:	68da      	ldr	r2, [r3, #12]
 8000ace:	0792      	lsls	r2, r2, #30
 8000ad0:	d506      	bpl.n	8000ae0 <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000ad2:	4905      	ldr	r1, [pc, #20]	; (8000ae8 <FLASH_SetErrorCode+0x88>)
 8000ad4:	69ca      	ldr	r2, [r1, #28]
 8000ad6:	f042 0220 	orr.w	r2, r2, #32
 8000ada:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000adc:	2202      	movs	r2, #2
 8000ade:	60da      	str	r2, [r3, #12]
  }
}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023c00 	.word	0x40023c00
 8000ae8:	20000088 	.word	0x20000088

08000aec <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_FLASH_Unlock+0x1c>)
 8000aee:	691a      	ldr	r2, [r3, #16]
 8000af0:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000af2:	bfbf      	itttt	lt
 8000af4:	4a05      	ldrlt	r2, [pc, #20]	; (8000b0c <HAL_FLASH_Unlock+0x20>)
 8000af6:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000af8:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8000afc:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000afe:	bfba      	itte	lt
 8000b00:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000b02:	0fc0      	lsrlt	r0, r0, #31
 8000b04:	2000      	movge	r0, #0
}
 8000b06:	4770      	bx	lr
 8000b08:	40023c00 	.word	0x40023c00
 8000b0c:	45670123 	.word	0x45670123

08000b10 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8000b10:	4a03      	ldr	r2, [pc, #12]	; (8000b20 <HAL_FLASH_Lock+0x10>)
 8000b12:	6913      	ldr	r3, [r2, #16]
 8000b14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b18:	6113      	str	r3, [r2, #16]
}
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023c00 	.word	0x40023c00

08000b24 <HAL_FLASH_OB_Unlock>:
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_FLASH_OB_Unlock+0x1c>)
 8000b26:	695a      	ldr	r2, [r3, #20]
 8000b28:	07d2      	lsls	r2, r2, #31
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8000b2a:	bf41      	itttt	mi
 8000b2c:	4a05      	ldrmi	r2, [pc, #20]	; (8000b44 <HAL_FLASH_OB_Unlock+0x20>)
 8000b2e:	609a      	strmi	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8000b30:	f102 3244 	addmi.w	r2, r2, #1145324612	; 0x44444444
  return HAL_OK;  
 8000b34:	2000      	movmi	r0, #0
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8000b36:	bf4c      	ite	mi
 8000b38:	609a      	strmi	r2, [r3, #8]
    return HAL_ERROR;
 8000b3a:	2001      	movpl	r0, #1
}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40023c00 	.word	0x40023c00
 8000b44:	08192a3b 	.word	0x08192a3b

08000b48 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <FLASH_WaitForLastOperation+0x48>)
{ 
 8000b4a:	b570      	push	{r4, r5, r6, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b4c:	2200      	movs	r2, #0
{ 
 8000b4e:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b50:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8000b52:	f7ff fec9 	bl	80008e8 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000b56:	4d0f      	ldr	r5, [pc, #60]	; (8000b94 <FLASH_WaitForLastOperation+0x4c>)
  tickstart = HAL_GetTick();
 8000b58:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000b5a:	68eb      	ldr	r3, [r5, #12]
 8000b5c:	03da      	lsls	r2, r3, #15
 8000b5e:	d40c      	bmi.n	8000b7a <FLASH_WaitForLastOperation+0x32>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000b60:	68eb      	ldr	r3, [r5, #12]
 8000b62:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000b64:	bf44      	itt	mi
 8000b66:	2301      	movmi	r3, #1
 8000b68:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000b6a:	68e8      	ldr	r0, [r5, #12]
 8000b6c:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 8000b70:	d007      	beq.n	8000b82 <FLASH_WaitForLastOperation+0x3a>
    FLASH_SetErrorCode();
 8000b72:	f7ff ff75 	bl	8000a60 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000b76:	2001      	movs	r0, #1
 8000b78:	e003      	b.n	8000b82 <FLASH_WaitForLastOperation+0x3a>
    if(Timeout != HAL_MAX_DELAY)
 8000b7a:	1c61      	adds	r1, r4, #1
 8000b7c:	d0ed      	beq.n	8000b5a <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000b7e:	b90c      	cbnz	r4, 8000b84 <FLASH_WaitForLastOperation+0x3c>
        return HAL_TIMEOUT;
 8000b80:	2003      	movs	r0, #3
}  
 8000b82:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000b84:	f7ff feb0 	bl	80008e8 <HAL_GetTick>
 8000b88:	1b80      	subs	r0, r0, r6
 8000b8a:	42a0      	cmp	r0, r4
 8000b8c:	d9e5      	bls.n	8000b5a <FLASH_WaitForLastOperation+0x12>
 8000b8e:	e7f7      	b.n	8000b80 <FLASH_WaitForLastOperation+0x38>
 8000b90:	20000088 	.word	0x20000088
 8000b94:	40023c00 	.word	0x40023c00

08000b98 <HAL_FLASH_Program>:
{
 8000b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8000b9a:	4e20      	ldr	r6, [pc, #128]	; (8000c1c <HAL_FLASH_Program+0x84>)
{
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8000ba0:	7e32      	ldrb	r2, [r6, #24]
 8000ba2:	2a01      	cmp	r2, #1
{
 8000ba4:	4607      	mov	r7, r0
 8000ba6:	460d      	mov	r5, r1
  __HAL_LOCK(&pFlash);
 8000ba8:	d035      	beq.n	8000c16 <HAL_FLASH_Program+0x7e>
 8000baa:	2201      	movs	r2, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000bac:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000bb0:	7632      	strb	r2, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000bb2:	f7ff ffc9 	bl	8000b48 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000bb6:	b9b8      	cbnz	r0, 8000be8 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000bb8:	9b01      	ldr	r3, [sp, #4]
 8000bba:	b9cf      	cbnz	r7, 8000bf0 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <HAL_FLASH_Program+0x88>)
 8000bbe:	691a      	ldr	r2, [r3, #16]
 8000bc0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000bc4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000bc6:	691a      	ldr	r2, [r3, #16]
 8000bc8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000bca:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000bcc:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8000bce:	f042 0201 	orr.w	r2, r2, #1
 8000bd2:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8000bd4:	702c      	strb	r4, [r5, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000bd6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bda:	f7ff ffb5 	bl	8000b48 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8000bde:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <HAL_FLASH_Program+0x88>)
 8000be0:	6913      	ldr	r3, [r2, #16]
 8000be2:	f023 0301 	bic.w	r3, r3, #1
 8000be6:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8000be8:	2300      	movs	r3, #0
 8000bea:	7633      	strb	r3, [r6, #24]
}
 8000bec:	b003      	add	sp, #12
 8000bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000bf0:	2f01      	cmp	r7, #1
 8000bf2:	d104      	bne.n	8000bfe <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000bf4:	b2a1      	uxth	r1, r4
 8000bf6:	4628      	mov	r0, r5
 8000bf8:	f7ff ff20 	bl	8000a3c <FLASH_Program_HalfWord>
 8000bfc:	e7eb      	b.n	8000bd6 <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000bfe:	2f02      	cmp	r7, #2
 8000c00:	d104      	bne.n	8000c0c <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000c02:	4621      	mov	r1, r4
 8000c04:	4628      	mov	r0, r5
 8000c06:	f7ff ff07 	bl	8000a18 <FLASH_Program_Word>
 8000c0a:	e7e4      	b.n	8000bd6 <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8000c0c:	4622      	mov	r2, r4
 8000c0e:	4628      	mov	r0, r5
 8000c10:	f7ff feec 	bl	80009ec <FLASH_Program_DoubleWord>
 8000c14:	e7df      	b.n	8000bd6 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8000c16:	2002      	movs	r0, #2
 8000c18:	e7e8      	b.n	8000bec <HAL_FLASH_Program+0x54>
 8000c1a:	bf00      	nop
 8000c1c:	20000088 	.word	0x20000088
 8000c20:	40023c00 	.word	0x40023c00

08000c24 <HAL_FLASH_OB_Launch>:
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_FLASH_OB_Launch+0x14>)
 8000c26:	7d13      	ldrb	r3, [r2, #20]
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	7513      	strb	r3, [r2, #20]
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 8000c2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c32:	f7ff bf89 	b.w	8000b48 <FLASH_WaitForLastOperation>
 8000c36:	bf00      	nop
 8000c38:	40023c00 	.word	0x40023c00

08000c3c <FLASH_MassErase.constprop.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <FLASH_MassErase.constprop.0+0x20>)
 8000c3e:	6919      	ldr	r1, [r3, #16]
 8000c40:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8000c44:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000c46:	6919      	ldr	r1, [r3, #16]
 8000c48:	f041 0104 	orr.w	r1, r1, #4
 8000c4c:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8000c4e:	691a      	ldr	r2, [r3, #16]
 8000c50:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8000c54:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8000c58:	6118      	str	r0, [r3, #16]
}
 8000c5a:	4770      	bx	lr
 8000c5c:	40023c00 	.word	0x40023c00

08000c60 <HAL_FLASHEx_OBProgram>:
{
 8000c60:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 8000c62:	4e29      	ldr	r6, [pc, #164]	; (8000d08 <HAL_FLASHEx_OBProgram+0xa8>)
 8000c64:	7e33      	ldrb	r3, [r6, #24]
 8000c66:	2b01      	cmp	r3, #1
{
 8000c68:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8000c6a:	d04a      	beq.n	8000d02 <HAL_FLASHEx_OBProgram+0xa2>
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	7630      	strb	r0, [r6, #24]
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8000c70:	6823      	ldr	r3, [r4, #0]
 8000c72:	07dd      	lsls	r5, r3, #31
 8000c74:	d50e      	bpl.n	8000c94 <HAL_FLASHEx_OBProgram+0x34>
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8000c76:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8000c7a:	4283      	cmp	r3, r0
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c7c:	f24c 3050 	movw	r0, #50000	; 0xc350
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8000c80:	d135      	bne.n	8000cee <HAL_FLASHEx_OBProgram+0x8e>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c82:	f7ff ff61 	bl	8000b48 <FLASH_WaitForLastOperation>

  if (status == HAL_OK)
 8000c86:	b928      	cbnz	r0, 8000c94 <HAL_FLASHEx_OBProgram+0x34>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 8000c88:	4a20      	ldr	r2, [pc, #128]	; (8000d0c <HAL_FLASHEx_OBProgram+0xac>)
 8000c8a:	8ad3      	ldrh	r3, [r2, #22]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	ea23 0505 	bic.w	r5, r3, r5
 8000c92:	82d5      	strh	r5, [r2, #22]
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8000c94:	6823      	ldr	r3, [r4, #0]
 8000c96:	0799      	lsls	r1, r3, #30
 8000c98:	d508      	bpl.n	8000cac <HAL_FLASHEx_OBProgram+0x4c>

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c9a:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8000c9e:	6925      	ldr	r5, [r4, #16]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ca0:	f7ff ff52 	bl	8000b48 <FLASH_WaitForLastOperation>

  if (status == HAL_OK)
 8000ca4:	b910      	cbnz	r0, 8000cac <HAL_FLASHEx_OBProgram+0x4c>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_FLASHEx_OBProgram+0xac>)
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8000ca8:	b2ed      	uxtb	r5, r5
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 8000caa:	755d      	strb	r5, [r3, #21]
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8000cac:	6823      	ldr	r3, [r4, #0]
 8000cae:	075a      	lsls	r2, r3, #29
 8000cb0:	d50d      	bpl.n	8000cce <HAL_FLASHEx_OBProgram+0x6e>
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cb2:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8000cb6:	7e25      	ldrb	r5, [r4, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cb8:	f7ff ff46 	bl	8000b48 <FLASH_WaitForLastOperation>

  if (status == HAL_OK)
 8000cbc:	b938      	cbnz	r0, 8000cce <HAL_FLASHEx_OBProgram+0x6e>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8000cbe:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <HAL_FLASHEx_OBProgram+0xac>)
 8000cc0:	7d13      	ldrb	r3, [r2, #20]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 8000cc2:	f025 051f 	bic.w	r5, r5, #31
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8000cc6:	f003 031f 	and.w	r3, r3, #31
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 8000cca:	431d      	orrs	r5, r3
 8000ccc:	7515      	strb	r5, [r2, #20]
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8000cce:	6823      	ldr	r3, [r4, #0]
 8000cd0:	071b      	lsls	r3, r3, #28
 8000cd2:	d509      	bpl.n	8000ce8 <HAL_FLASHEx_OBProgram+0x88>
{
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <HAL_FLASHEx_OBProgram+0xac>)
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8000cd6:	7d22      	ldrb	r2, [r4, #20]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8000cd8:	7d19      	ldrb	r1, [r3, #20]
 8000cda:	f001 01f3 	and.w	r1, r1, #243	; 0xf3
 8000cde:	7519      	strb	r1, [r3, #20]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 8000ce0:	7d19      	ldrb	r1, [r3, #20]
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	751a      	strb	r2, [r3, #20]
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8000ce6:	2000      	movs	r0, #0
  __HAL_UNLOCK(&pFlash);
 8000ce8:	2300      	movs	r3, #0
 8000cea:	7633      	strb	r3, [r6, #24]
}
 8000cec:	bd70      	pop	{r4, r5, r6, pc}
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cee:	f7ff ff2b 	bl	8000b48 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	d1ce      	bne.n	8000c94 <HAL_FLASHEx_OBProgram+0x34>
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <HAL_FLASHEx_OBProgram+0xac>)
 8000cf8:	8ada      	ldrh	r2, [r3, #22]
 8000cfa:	4315      	orrs	r5, r2
 8000cfc:	b2ad      	uxth	r5, r5
 8000cfe:	82dd      	strh	r5, [r3, #22]
 8000d00:	e7c8      	b.n	8000c94 <HAL_FLASHEx_OBProgram+0x34>
  __HAL_LOCK(&pFlash);
 8000d02:	2002      	movs	r0, #2
 8000d04:	e7f2      	b.n	8000cec <HAL_FLASHEx_OBProgram+0x8c>
 8000d06:	bf00      	nop
 8000d08:	20000088 	.word	0x20000088
 8000d0c:	40023c00 	.word	0x40023c00

08000d10 <HAL_FLASHEx_OBGetConfig>:
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8000d10:	230f      	movs	r3, #15
 8000d12:	6003      	str	r3, [r0, #0]
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_FLASHEx_OBGetConfig+0x30>)
 8000d16:	8ada      	ldrh	r2, [r3, #22]
 8000d18:	b292      	uxth	r2, r2
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8000d1a:	6082      	str	r2, [r0, #8]
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8000d1c:	7d59      	ldrb	r1, [r3, #21]
 8000d1e:	29cc      	cmp	r1, #204	; 0xcc
 8000d20:	b2ca      	uxtb	r2, r1
 8000d22:	d003      	beq.n	8000d2c <HAL_FLASHEx_OBGetConfig+0x1c>
  {
    readstatus = OB_RDP_LEVEL_2;
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8000d24:	7d5a      	ldrb	r2, [r3, #21]
  {
    readstatus = OB_RDP_LEVEL_0;
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 8000d26:	2aaa      	cmp	r2, #170	; 0xaa
 8000d28:	bf18      	it	ne
 8000d2a:	2255      	movne	r2, #85	; 0x55
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8000d2c:	6102      	str	r2, [r0, #16]
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8000d2e:	695a      	ldr	r2, [r3, #20]
 8000d30:	f022 021f 	bic.w	r2, r2, #31
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8000d34:	7602      	strb	r2, [r0, #24]
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8000d36:	7d1b      	ldrb	r3, [r3, #20]
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8000d38:	f003 030c 	and.w	r3, r3, #12
 8000d3c:	6143      	str	r3, [r0, #20]
}
 8000d3e:	4770      	bx	lr
 8000d40:	40023c00 	.word	0x40023c00

08000d44 <HAL_FLASHEx_OB_DeSelectPCROP>:
  optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F);
 8000d44:	4a03      	ldr	r2, [pc, #12]	; (8000d54 <HAL_FLASHEx_OB_DeSelectPCROP+0x10>)
 8000d46:	7dd3      	ldrb	r3, [r2, #23]
 8000d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PCROP_DESELECTED | optiontmp);
 8000d4c:	75d3      	strb	r3, [r2, #23]
}
 8000d4e:	2000      	movs	r0, #0
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <FLASH_Erase_Sector>:
  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000d58:	b139      	cbz	r1, 8000d6a <FLASH_Erase_Sector+0x12>
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000d5a:	2901      	cmp	r1, #1
 8000d5c:	d01c      	beq.n	8000d98 <FLASH_Erase_Sector+0x40>
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000d5e:	2902      	cmp	r1, #2
 8000d60:	bf0c      	ite	eq
 8000d62:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8000d66:	f44f 7140 	movne.w	r1, #768	; 0x300
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <FLASH_Erase_Sector+0x48>)
 8000d6c:	691a      	ldr	r2, [r3, #16]
 8000d6e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d72:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000d74:	691a      	ldr	r2, [r3, #16]
 8000d76:	4311      	orrs	r1, r2
 8000d78:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000d7a:	691a      	ldr	r2, [r3, #16]
 8000d7c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000d80:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000d82:	691a      	ldr	r2, [r3, #16]
 8000d84:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000d88:	f040 0002 	orr.w	r0, r0, #2
 8000d8c:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000d8e:	691a      	ldr	r2, [r3, #16]
 8000d90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000d94:	611a      	str	r2, [r3, #16]
}
 8000d96:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9c:	e7e5      	b.n	8000d6a <FLASH_Erase_Sector+0x12>
 8000d9e:	bf00      	nop
 8000da0:	40023c00 	.word	0x40023c00

08000da4 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <FLASH_FlushCaches+0x54>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	0591      	lsls	r1, r2, #22
 8000daa:	d50f      	bpl.n	8000dcc <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000db2:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000dc2:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dca:	601a      	str	r2, [r3, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <FLASH_FlushCaches+0x54>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	0552      	lsls	r2, r2, #21
 8000dd2:	d50f      	bpl.n	8000df4 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dda:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000dea:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000df2:	601a      	str	r2, [r3, #0]
  }
}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <HAL_FLASHEx_Erase>:
{
 8000dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8000e00:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8000e98 <HAL_FLASHEx_Erase+0x9c>
 8000e04:	f898 3018 	ldrb.w	r3, [r8, #24]
 8000e08:	2b01      	cmp	r3, #1
{
 8000e0a:	4605      	mov	r5, r0
 8000e0c:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 8000e0e:	d03f      	beq.n	8000e90 <HAL_FLASHEx_Erase+0x94>
 8000e10:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e12:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000e16:	f888 3018 	strb.w	r3, [r8, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e1a:	f7ff fe95 	bl	8000b48 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8000e1e:	4604      	mov	r4, r0
 8000e20:	b9a0      	cbnz	r0, 8000e4c <HAL_FLASHEx_Erase+0x50>
    *SectorError = 0xFFFFFFFFU;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	603b      	str	r3, [r7, #0]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000e28:	682b      	ldr	r3, [r5, #0]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d114      	bne.n	8000e58 <HAL_FLASHEx_Erase+0x5c>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8000e2e:	7c28      	ldrb	r0, [r5, #16]
 8000e30:	f7ff ff04 	bl	8000c3c <FLASH_MassErase.constprop.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e38:	f7ff fe86 	bl	8000b48 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8000e3c:	4a15      	ldr	r2, [pc, #84]	; (8000e94 <HAL_FLASHEx_Erase+0x98>)
 8000e3e:	6913      	ldr	r3, [r2, #16]
 8000e40:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e44:	4604      	mov	r4, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8000e46:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();
 8000e48:	f7ff ffac 	bl	8000da4 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f888 3018 	strb.w	r3, [r8, #24]
}
 8000e52:	4620      	mov	r0, r4
 8000e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000e58:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000e5a:	f8df 9038 	ldr.w	r9, [pc, #56]	; 8000e94 <HAL_FLASHEx_Erase+0x98>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000e5e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8000e62:	4413      	add	r3, r2
 8000e64:	42b3      	cmp	r3, r6
 8000e66:	d9ef      	bls.n	8000e48 <HAL_FLASHEx_Erase+0x4c>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000e68:	7c29      	ldrb	r1, [r5, #16]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	f7ff ff74 	bl	8000d58 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e74:	f7ff fe68 	bl	8000b48 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000e78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8000e7c:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8000e80:	f8c9 3010 	str.w	r3, [r9, #16]
        if (status != HAL_OK)
 8000e84:	b110      	cbz	r0, 8000e8c <HAL_FLASHEx_Erase+0x90>
          *SectorError = index;
 8000e86:	603e      	str	r6, [r7, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e88:	4604      	mov	r4, r0
          break;
 8000e8a:	e7dd      	b.n	8000e48 <HAL_FLASHEx_Erase+0x4c>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000e8c:	3601      	adds	r6, #1
 8000e8e:	e7e6      	b.n	8000e5e <HAL_FLASHEx_Erase+0x62>
  __HAL_LOCK(&pFlash);
 8000e90:	2402      	movs	r4, #2
 8000e92:	e7de      	b.n	8000e52 <HAL_FLASHEx_Erase+0x56>
 8000e94:	40023c00 	.word	0x40023c00
 8000e98:	20000088 	.word	0x20000088

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea0:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8001028 <HAL_GPIO_Init+0x18c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ea4:	4a5e      	ldr	r2, [pc, #376]	; (8001020 <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea6:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea8:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000eaa:	2401      	movs	r4, #1
 8000eac:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eae:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8000eb2:	43ac      	bics	r4, r5
 8000eb4:	f040 80a5 	bne.w	8001002 <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb8:	684d      	ldr	r5, [r1, #4]
 8000eba:	f005 0403 	and.w	r4, r5, #3
 8000ebe:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec2:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec4:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec6:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eca:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ecc:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed0:	d834      	bhi.n	8000f3c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000ed2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed8:	68cf      	ldr	r7, [r1, #12]
 8000eda:	fa07 f708 	lsl.w	r7, r7, r8
 8000ede:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000ee2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ee4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee6:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eea:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000eee:	409f      	lsls	r7, r3
 8000ef0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000ef4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000ef6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000efc:	688f      	ldr	r7, [r1, #8]
 8000efe:	fa07 f708 	lsl.w	r7, r7, r8
 8000f02:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f06:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000f08:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0a:	d119      	bne.n	8000f40 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000f0c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000f10:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f14:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000f18:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f1c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000f20:	f04f 0e0f 	mov.w	lr, #15
 8000f24:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000f28:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f2c:	690f      	ldr	r7, [r1, #16]
 8000f2e:	fa07 f70b 	lsl.w	r7, r7, fp
 8000f32:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000f36:	f8ca 7020 	str.w	r7, [sl, #32]
 8000f3a:	e001      	b.n	8000f40 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f3c:	2c03      	cmp	r4, #3
 8000f3e:	d1da      	bne.n	8000ef6 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000f40:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f42:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f46:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f48:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f4a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8000f4e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f50:	d057      	beq.n	8001002 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	f04f 0a00 	mov.w	sl, #0
 8000f56:	f8cd a004 	str.w	sl, [sp, #4]
 8000f5a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f5e:	4c31      	ldr	r4, [pc, #196]	; (8001024 <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000f64:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8000f68:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8000f6c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000f70:	9601      	str	r6, [sp, #4]
 8000f72:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f74:	f023 0603 	bic.w	r6, r3, #3
 8000f78:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000f7c:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f80:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f84:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f88:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000f8c:	270f      	movs	r7, #15
 8000f8e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f92:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f94:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f98:	d03a      	beq.n	8001010 <HAL_GPIO_Init+0x174>
 8000f9a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000f9e:	42a0      	cmp	r0, r4
 8000fa0:	d038      	beq.n	8001014 <HAL_GPIO_Init+0x178>
 8000fa2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000fa6:	42a0      	cmp	r0, r4
 8000fa8:	d036      	beq.n	8001018 <HAL_GPIO_Init+0x17c>
 8000faa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000fae:	42a0      	cmp	r0, r4
 8000fb0:	d034      	beq.n	800101c <HAL_GPIO_Init+0x180>
 8000fb2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000fb6:	42a0      	cmp	r0, r4
 8000fb8:	bf0c      	ite	eq
 8000fba:	2404      	moveq	r4, #4
 8000fbc:	2407      	movne	r4, #7
 8000fbe:	fa04 f40e 	lsl.w	r4, r4, lr
 8000fc2:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc4:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8000fc6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fcc:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8000fce:	bf54      	ite	pl
 8000fd0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000fd2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8000fd6:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8000fd8:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fda:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	bf54      	ite	pl
 8000fde:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000fe0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8000fe4:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8000fe6:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fe8:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8000fea:	bf54      	ite	pl
 8000fec:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000fee:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8000ff2:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff6:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000ff8:	bf54      	ite	pl
 8000ffa:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000ffc:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001000:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001002:	3301      	adds	r3, #1
 8001004:	2b10      	cmp	r3, #16
 8001006:	f47f af4f 	bne.w	8000ea8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800100a:	b003      	add	sp, #12
 800100c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001010:	4654      	mov	r4, sl
 8001012:	e7d4      	b.n	8000fbe <HAL_GPIO_Init+0x122>
 8001014:	2401      	movs	r4, #1
 8001016:	e7d2      	b.n	8000fbe <HAL_GPIO_Init+0x122>
 8001018:	2402      	movs	r4, #2
 800101a:	e7d0      	b.n	8000fbe <HAL_GPIO_Init+0x122>
 800101c:	2403      	movs	r4, #3
 800101e:	e7ce      	b.n	8000fbe <HAL_GPIO_Init+0x122>
 8001020:	40013c00 	.word	0x40013c00
 8001024:	40020000 	.word	0x40020000
 8001028:	40023800 	.word	0x40023800

0800102c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800102c:	6903      	ldr	r3, [r0, #16]
 800102e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001030:	bf14      	ite	ne
 8001032:	2001      	movne	r0, #1
 8001034:	2000      	moveq	r0, #0
 8001036:	4770      	bx	lr

08001038 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001038:	b10a      	cbz	r2, 800103e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800103a:	6181      	str	r1, [r0, #24]
  }
}
 800103c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800103e:	0409      	lsls	r1, r1, #16
 8001040:	e7fb      	b.n	800103a <HAL_GPIO_WritePin+0x2>
	...

08001044 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001044:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001048:	4604      	mov	r4, r0
 800104a:	b340      	cbz	r0, 800109e <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104c:	6803      	ldr	r3, [r0, #0]
 800104e:	07dd      	lsls	r5, r3, #31
 8001050:	d410      	bmi.n	8001074 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	0798      	lsls	r0, r3, #30
 8001056:	d45e      	bmi.n	8001116 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	071a      	lsls	r2, r3, #28
 800105c:	f100 80a0 	bmi.w	80011a0 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001060:	6823      	ldr	r3, [r4, #0]
 8001062:	075b      	lsls	r3, r3, #29
 8001064:	f100 80c0 	bmi.w	80011e8 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001068:	69a0      	ldr	r0, [r4, #24]
 800106a:	2800      	cmp	r0, #0
 800106c:	f040 8128 	bne.w	80012c0 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001070:	2000      	movs	r0, #0
 8001072:	e02b      	b.n	80010cc <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001074:	4b8f      	ldr	r3, [pc, #572]	; (80012b4 <HAL_RCC_OscConfig+0x270>)
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	f002 020c 	and.w	r2, r2, #12
 800107c:	2a04      	cmp	r2, #4
 800107e:	d007      	beq.n	8001090 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001086:	2a08      	cmp	r2, #8
 8001088:	d10b      	bne.n	80010a2 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	0251      	lsls	r1, r2, #9
 800108e:	d508      	bpl.n	80010a2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001090:	4b88      	ldr	r3, [pc, #544]	; (80012b4 <HAL_RCC_OscConfig+0x270>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	039a      	lsls	r2, r3, #14
 8001096:	d5dc      	bpl.n	8001052 <HAL_RCC_OscConfig+0xe>
 8001098:	6863      	ldr	r3, [r4, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1d9      	bne.n	8001052 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800109e:	2001      	movs	r0, #1
 80010a0:	e014      	b.n	80010cc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a2:	6862      	ldr	r2, [r4, #4]
 80010a4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80010a8:	d113      	bne.n	80010d2 <HAL_RCC_OscConfig+0x8e>
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80010b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010b2:	f7ff fc19 	bl	80008e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b6:	4e7f      	ldr	r6, [pc, #508]	; (80012b4 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80010b8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ba:	6833      	ldr	r3, [r6, #0]
 80010bc:	039b      	lsls	r3, r3, #14
 80010be:	d4c8      	bmi.n	8001052 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c0:	f7ff fc12 	bl	80008e8 <HAL_GetTick>
 80010c4:	1b40      	subs	r0, r0, r5
 80010c6:	2864      	cmp	r0, #100	; 0x64
 80010c8:	d9f7      	bls.n	80010ba <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80010ca:	2003      	movs	r0, #3
}
 80010cc:	b002      	add	sp, #8
 80010ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d2:	4d78      	ldr	r5, [pc, #480]	; (80012b4 <HAL_RCC_OscConfig+0x270>)
 80010d4:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80010d8:	682b      	ldr	r3, [r5, #0]
 80010da:	d107      	bne.n	80010ec <HAL_RCC_OscConfig+0xa8>
 80010dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e0:	602b      	str	r3, [r5, #0]
 80010e2:	682b      	ldr	r3, [r5, #0]
 80010e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010ea:	e7e2      	b.n	80010b2 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f0:	602b      	str	r3, [r5, #0]
 80010f2:	682b      	ldr	r3, [r5, #0]
 80010f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010fa:	2a00      	cmp	r2, #0
 80010fc:	d1d9      	bne.n	80010b2 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 80010fe:	f7ff fbf3 	bl	80008e8 <HAL_GetTick>
 8001102:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001104:	682b      	ldr	r3, [r5, #0]
 8001106:	039f      	lsls	r7, r3, #14
 8001108:	d5a3      	bpl.n	8001052 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800110a:	f7ff fbed 	bl	80008e8 <HAL_GetTick>
 800110e:	1b80      	subs	r0, r0, r6
 8001110:	2864      	cmp	r0, #100	; 0x64
 8001112:	d9f7      	bls.n	8001104 <HAL_RCC_OscConfig+0xc0>
 8001114:	e7d9      	b.n	80010ca <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001116:	4b67      	ldr	r3, [pc, #412]	; (80012b4 <HAL_RCC_OscConfig+0x270>)
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	f012 0f0c 	tst.w	r2, #12
 800111e:	d007      	beq.n	8001130 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001126:	2a08      	cmp	r2, #8
 8001128:	d111      	bne.n	800114e <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	025e      	lsls	r6, r3, #9
 800112e:	d40e      	bmi.n	800114e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001130:	4a60      	ldr	r2, [pc, #384]	; (80012b4 <HAL_RCC_OscConfig+0x270>)
 8001132:	6813      	ldr	r3, [r2, #0]
 8001134:	079d      	lsls	r5, r3, #30
 8001136:	d502      	bpl.n	800113e <HAL_RCC_OscConfig+0xfa>
 8001138:	68e3      	ldr	r3, [r4, #12]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d1af      	bne.n	800109e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113e:	6813      	ldr	r3, [r2, #0]
 8001140:	6921      	ldr	r1, [r4, #16]
 8001142:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001146:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800114a:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114c:	e784      	b.n	8001058 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800114e:	68e2      	ldr	r2, [r4, #12]
 8001150:	4b59      	ldr	r3, [pc, #356]	; (80012b8 <HAL_RCC_OscConfig+0x274>)
 8001152:	b1b2      	cbz	r2, 8001182 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8001154:	2201      	movs	r2, #1
 8001156:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001158:	f7ff fbc6 	bl	80008e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115c:	4d55      	ldr	r5, [pc, #340]	; (80012b4 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800115e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001160:	682b      	ldr	r3, [r5, #0]
 8001162:	0798      	lsls	r0, r3, #30
 8001164:	d507      	bpl.n	8001176 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001166:	682b      	ldr	r3, [r5, #0]
 8001168:	6922      	ldr	r2, [r4, #16]
 800116a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800116e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001172:	602b      	str	r3, [r5, #0]
 8001174:	e770      	b.n	8001058 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001176:	f7ff fbb7 	bl	80008e8 <HAL_GetTick>
 800117a:	1b80      	subs	r0, r0, r6
 800117c:	2802      	cmp	r0, #2
 800117e:	d9ef      	bls.n	8001160 <HAL_RCC_OscConfig+0x11c>
 8001180:	e7a3      	b.n	80010ca <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8001182:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001184:	f7ff fbb0 	bl	80008e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001188:	4e4a      	ldr	r6, [pc, #296]	; (80012b4 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800118a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118c:	6833      	ldr	r3, [r6, #0]
 800118e:	0799      	lsls	r1, r3, #30
 8001190:	f57f af62 	bpl.w	8001058 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001194:	f7ff fba8 	bl	80008e8 <HAL_GetTick>
 8001198:	1b40      	subs	r0, r0, r5
 800119a:	2802      	cmp	r0, #2
 800119c:	d9f6      	bls.n	800118c <HAL_RCC_OscConfig+0x148>
 800119e:	e794      	b.n	80010ca <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011a0:	6962      	ldr	r2, [r4, #20]
 80011a2:	4b45      	ldr	r3, [pc, #276]	; (80012b8 <HAL_RCC_OscConfig+0x274>)
 80011a4:	b182      	cbz	r2, 80011c8 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80011a6:	2201      	movs	r2, #1
 80011a8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80011ac:	f7ff fb9c 	bl	80008e8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b0:	4e40      	ldr	r6, [pc, #256]	; (80012b4 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80011b2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80011b6:	079f      	lsls	r7, r3, #30
 80011b8:	f53f af52 	bmi.w	8001060 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011bc:	f7ff fb94 	bl	80008e8 <HAL_GetTick>
 80011c0:	1b40      	subs	r0, r0, r5
 80011c2:	2802      	cmp	r0, #2
 80011c4:	d9f6      	bls.n	80011b4 <HAL_RCC_OscConfig+0x170>
 80011c6:	e780      	b.n	80010ca <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80011c8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80011cc:	f7ff fb8c 	bl	80008e8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d0:	4e38      	ldr	r6, [pc, #224]	; (80012b4 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80011d2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80011d6:	0798      	lsls	r0, r3, #30
 80011d8:	f57f af42 	bpl.w	8001060 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011dc:	f7ff fb84 	bl	80008e8 <HAL_GetTick>
 80011e0:	1b40      	subs	r0, r0, r5
 80011e2:	2802      	cmp	r0, #2
 80011e4:	d9f6      	bls.n	80011d4 <HAL_RCC_OscConfig+0x190>
 80011e6:	e770      	b.n	80010ca <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e8:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <HAL_RCC_OscConfig+0x270>)
 80011ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ec:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80011f0:	d128      	bne.n	8001244 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	9201      	str	r2, [sp, #4]
 80011f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011fa:	641a      	str	r2, [r3, #64]	; 0x40
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001206:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001208:	4d2c      	ldr	r5, [pc, #176]	; (80012bc <HAL_RCC_OscConfig+0x278>)
 800120a:	682b      	ldr	r3, [r5, #0]
 800120c:	05d9      	lsls	r1, r3, #23
 800120e:	d51b      	bpl.n	8001248 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001210:	68a3      	ldr	r3, [r4, #8]
 8001212:	4d28      	ldr	r5, [pc, #160]	; (80012b4 <HAL_RCC_OscConfig+0x270>)
 8001214:	2b01      	cmp	r3, #1
 8001216:	d127      	bne.n	8001268 <HAL_RCC_OscConfig+0x224>
 8001218:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001220:	f7ff fb62 	bl	80008e8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001224:	4e23      	ldr	r6, [pc, #140]	; (80012b4 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001226:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001228:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800122e:	079b      	lsls	r3, r3, #30
 8001230:	d539      	bpl.n	80012a6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001232:	2f00      	cmp	r7, #0
 8001234:	f43f af18 	beq.w	8001068 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001238:	4a1e      	ldr	r2, [pc, #120]	; (80012b4 <HAL_RCC_OscConfig+0x270>)
 800123a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800123c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	e711      	b.n	8001068 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001244:	2700      	movs	r7, #0
 8001246:	e7df      	b.n	8001208 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001248:	682b      	ldr	r3, [r5, #0]
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001250:	f7ff fb4a 	bl	80008e8 <HAL_GetTick>
 8001254:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001256:	682b      	ldr	r3, [r5, #0]
 8001258:	05da      	lsls	r2, r3, #23
 800125a:	d4d9      	bmi.n	8001210 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800125c:	f7ff fb44 	bl	80008e8 <HAL_GetTick>
 8001260:	1b80      	subs	r0, r0, r6
 8001262:	2802      	cmp	r0, #2
 8001264:	d9f7      	bls.n	8001256 <HAL_RCC_OscConfig+0x212>
 8001266:	e730      	b.n	80010ca <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001268:	2b05      	cmp	r3, #5
 800126a:	d104      	bne.n	8001276 <HAL_RCC_OscConfig+0x232>
 800126c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	672b      	str	r3, [r5, #112]	; 0x70
 8001274:	e7d0      	b.n	8001218 <HAL_RCC_OscConfig+0x1d4>
 8001276:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001278:	f022 0201 	bic.w	r2, r2, #1
 800127c:	672a      	str	r2, [r5, #112]	; 0x70
 800127e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001280:	f022 0204 	bic.w	r2, r2, #4
 8001284:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1ca      	bne.n	8001220 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 800128a:	f7ff fb2d 	bl	80008e8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800128e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001292:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001294:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001296:	0798      	lsls	r0, r3, #30
 8001298:	d5cb      	bpl.n	8001232 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800129a:	f7ff fb25 	bl	80008e8 <HAL_GetTick>
 800129e:	1b80      	subs	r0, r0, r6
 80012a0:	4540      	cmp	r0, r8
 80012a2:	d9f7      	bls.n	8001294 <HAL_RCC_OscConfig+0x250>
 80012a4:	e711      	b.n	80010ca <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a6:	f7ff fb1f 	bl	80008e8 <HAL_GetTick>
 80012aa:	1b40      	subs	r0, r0, r5
 80012ac:	4540      	cmp	r0, r8
 80012ae:	d9bd      	bls.n	800122c <HAL_RCC_OscConfig+0x1e8>
 80012b0:	e70b      	b.n	80010ca <HAL_RCC_OscConfig+0x86>
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	42470000 	.word	0x42470000
 80012bc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012c0:	4d36      	ldr	r5, [pc, #216]	; (800139c <HAL_RCC_OscConfig+0x358>)
 80012c2:	68ab      	ldr	r3, [r5, #8]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d03d      	beq.n	8001348 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012cc:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <HAL_RCC_OscConfig+0x35c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80012d2:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d4:	d12b      	bne.n	800132e <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 80012d6:	f7ff fb07 	bl	80008e8 <HAL_GetTick>
 80012da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012dc:	682b      	ldr	r3, [r5, #0]
 80012de:	0199      	lsls	r1, r3, #6
 80012e0:	d41f      	bmi.n	8001322 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012e2:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80012ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80012f6:	0852      	lsrs	r2, r2, #1
 80012f8:	3a01      	subs	r2, #1
 80012fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012fe:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001300:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001302:	4d26      	ldr	r5, [pc, #152]	; (800139c <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8001304:	2201      	movs	r2, #1
 8001306:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001308:	f7ff faee 	bl	80008e8 <HAL_GetTick>
 800130c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130e:	682b      	ldr	r3, [r5, #0]
 8001310:	019a      	lsls	r2, r3, #6
 8001312:	f53f aead 	bmi.w	8001070 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001316:	f7ff fae7 	bl	80008e8 <HAL_GetTick>
 800131a:	1b00      	subs	r0, r0, r4
 800131c:	2802      	cmp	r0, #2
 800131e:	d9f6      	bls.n	800130e <HAL_RCC_OscConfig+0x2ca>
 8001320:	e6d3      	b.n	80010ca <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001322:	f7ff fae1 	bl	80008e8 <HAL_GetTick>
 8001326:	1b80      	subs	r0, r0, r6
 8001328:	2802      	cmp	r0, #2
 800132a:	d9d7      	bls.n	80012dc <HAL_RCC_OscConfig+0x298>
 800132c:	e6cd      	b.n	80010ca <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800132e:	f7ff fadb 	bl	80008e8 <HAL_GetTick>
 8001332:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001334:	682b      	ldr	r3, [r5, #0]
 8001336:	019b      	lsls	r3, r3, #6
 8001338:	f57f ae9a 	bpl.w	8001070 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133c:	f7ff fad4 	bl	80008e8 <HAL_GetTick>
 8001340:	1b00      	subs	r0, r0, r4
 8001342:	2802      	cmp	r0, #2
 8001344:	d9f6      	bls.n	8001334 <HAL_RCC_OscConfig+0x2f0>
 8001346:	e6c0      	b.n	80010ca <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001348:	2801      	cmp	r0, #1
 800134a:	f43f aebf 	beq.w	80010cc <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 800134e:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001350:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001352:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001356:	4291      	cmp	r1, r2
 8001358:	f47f aea1 	bne.w	800109e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135c:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800135e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001362:	428a      	cmp	r2, r1
 8001364:	f47f ae9b 	bne.w	800109e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001368:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800136a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800136e:	401a      	ands	r2, r3
 8001370:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001374:	f47f ae93 	bne.w	800109e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001378:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800137a:	0852      	lsrs	r2, r2, #1
 800137c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001380:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001382:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001386:	f47f ae8a 	bne.w	800109e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800138a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800138c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001390:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001394:	f43f ae6c 	beq.w	8001070 <HAL_RCC_OscConfig+0x2c>
 8001398:	e681      	b.n	800109e <HAL_RCC_OscConfig+0x5a>
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	42470000 	.word	0x42470000

080013a4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013a4:	4913      	ldr	r1, [pc, #76]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80013a6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013a8:	688b      	ldr	r3, [r1, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	d01c      	beq.n	80013ec <HAL_RCC_GetSysClockFreq+0x48>
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d11c      	bne.n	80013f0 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013b6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013b8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ba:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013bc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c0:	bf14      	ite	ne
 80013c2:	480d      	ldrne	r0, [pc, #52]	; (80013f8 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c4:	480d      	ldreq	r0, [pc, #52]	; (80013fc <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80013ca:	bf18      	it	ne
 80013cc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d2:	fba1 0100 	umull	r0, r1, r1, r0
 80013d6:	f7fe ff09 	bl	80001ec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x50>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80013e2:	3301      	adds	r3, #1
 80013e4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80013e6:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80013ea:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <HAL_RCC_GetSysClockFreq+0x54>)
 80013ee:	e7fc      	b.n	80013ea <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80013f2:	e7fa      	b.n	80013ea <HAL_RCC_GetSysClockFreq+0x46>
 80013f4:	40023800 	.word	0x40023800
 80013f8:	007a1200 	.word	0x007a1200
 80013fc:	00f42400 	.word	0x00f42400

08001400 <HAL_RCC_ClockConfig>:
{
 8001400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001404:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001406:	4604      	mov	r4, r0
 8001408:	b910      	cbnz	r0, 8001410 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800140a:	2001      	movs	r0, #1
}
 800140c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001410:	4b44      	ldr	r3, [pc, #272]	; (8001524 <HAL_RCC_ClockConfig+0x124>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	f002 0207 	and.w	r2, r2, #7
 8001418:	428a      	cmp	r2, r1
 800141a:	d328      	bcc.n	800146e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800141c:	6822      	ldr	r2, [r4, #0]
 800141e:	0797      	lsls	r7, r2, #30
 8001420:	d42d      	bmi.n	800147e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001422:	07d0      	lsls	r0, r2, #31
 8001424:	d441      	bmi.n	80014aa <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001426:	4b3f      	ldr	r3, [pc, #252]	; (8001524 <HAL_RCC_ClockConfig+0x124>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	f002 0207 	and.w	r2, r2, #7
 800142e:	42aa      	cmp	r2, r5
 8001430:	d866      	bhi.n	8001500 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001432:	6822      	ldr	r2, [r4, #0]
 8001434:	0751      	lsls	r1, r2, #29
 8001436:	d46c      	bmi.n	8001512 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001438:	0713      	lsls	r3, r2, #28
 800143a:	d507      	bpl.n	800144c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800143c:	4a3a      	ldr	r2, [pc, #232]	; (8001528 <HAL_RCC_ClockConfig+0x128>)
 800143e:	6921      	ldr	r1, [r4, #16]
 8001440:	6893      	ldr	r3, [r2, #8]
 8001442:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001446:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800144a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800144c:	f7ff ffaa 	bl	80013a4 <HAL_RCC_GetSysClockFreq>
 8001450:	4b35      	ldr	r3, [pc, #212]	; (8001528 <HAL_RCC_ClockConfig+0x128>)
 8001452:	4a36      	ldr	r2, [pc, #216]	; (800152c <HAL_RCC_ClockConfig+0x12c>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800145a:	5cd3      	ldrb	r3, [r2, r3]
 800145c:	40d8      	lsrs	r0, r3
 800145e:	4b34      	ldr	r3, [pc, #208]	; (8001530 <HAL_RCC_ClockConfig+0x130>)
 8001460:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001462:	4b34      	ldr	r3, [pc, #208]	; (8001534 <HAL_RCC_ClockConfig+0x134>)
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	f7ff f9f5 	bl	8000854 <HAL_InitTick>
  return HAL_OK;
 800146a:	2000      	movs	r0, #0
 800146c:	e7ce      	b.n	800140c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146e:	b2ca      	uxtb	r2, r1
 8001470:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	428b      	cmp	r3, r1
 800147a:	d1c6      	bne.n	800140a <HAL_RCC_ClockConfig+0xa>
 800147c:	e7ce      	b.n	800141c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <HAL_RCC_ClockConfig+0x128>)
 8001480:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001484:	bf1e      	ittt	ne
 8001486:	6899      	ldrne	r1, [r3, #8]
 8001488:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 800148c:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800148e:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001490:	bf42      	ittt	mi
 8001492:	6899      	ldrmi	r1, [r3, #8]
 8001494:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8001498:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800149a:	4923      	ldr	r1, [pc, #140]	; (8001528 <HAL_RCC_ClockConfig+0x128>)
 800149c:	68a0      	ldr	r0, [r4, #8]
 800149e:	688b      	ldr	r3, [r1, #8]
 80014a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014a4:	4303      	orrs	r3, r0
 80014a6:	608b      	str	r3, [r1, #8]
 80014a8:	e7bb      	b.n	8001422 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014aa:	6862      	ldr	r2, [r4, #4]
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <HAL_RCC_ClockConfig+0x128>)
 80014ae:	2a01      	cmp	r2, #1
 80014b0:	d11c      	bne.n	80014ec <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	d0a7      	beq.n	800140a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ba:	4e1b      	ldr	r6, [pc, #108]	; (8001528 <HAL_RCC_ClockConfig+0x128>)
 80014bc:	68b3      	ldr	r3, [r6, #8]
 80014be:	f023 0303 	bic.w	r3, r3, #3
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80014c6:	f7ff fa0f 	bl	80008e8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ca:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80014ce:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d0:	68b3      	ldr	r3, [r6, #8]
 80014d2:	6862      	ldr	r2, [r4, #4]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014dc:	d0a3      	beq.n	8001426 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014de:	f7ff fa03 	bl	80008e8 <HAL_GetTick>
 80014e2:	1bc0      	subs	r0, r0, r7
 80014e4:	4540      	cmp	r0, r8
 80014e6:	d9f3      	bls.n	80014d0 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80014e8:	2003      	movs	r0, #3
 80014ea:	e78f      	b.n	800140c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ec:	1e91      	subs	r1, r2, #2
 80014ee:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014f2:	d802      	bhi.n	80014fa <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014f8:	e7de      	b.n	80014b8 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fa:	f013 0f02 	tst.w	r3, #2
 80014fe:	e7db      	b.n	80014b8 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001500:	b2ea      	uxtb	r2, r5
 8001502:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	42ab      	cmp	r3, r5
 800150c:	f47f af7d 	bne.w	800140a <HAL_RCC_ClockConfig+0xa>
 8001510:	e78f      	b.n	8001432 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001512:	4905      	ldr	r1, [pc, #20]	; (8001528 <HAL_RCC_ClockConfig+0x128>)
 8001514:	68e0      	ldr	r0, [r4, #12]
 8001516:	688b      	ldr	r3, [r1, #8]
 8001518:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800151c:	4303      	orrs	r3, r0
 800151e:	608b      	str	r3, [r1, #8]
 8001520:	e78a      	b.n	8001438 <HAL_RCC_ClockConfig+0x38>
 8001522:	bf00      	nop
 8001524:	40023c00 	.word	0x40023c00
 8001528:	40023800 	.word	0x40023800
 800152c:	080022e8 	.word	0x080022e8
 8001530:	20000008 	.word	0x20000008
 8001534:	20000010 	.word	0x20000010

08001538 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <HAL_RCC_GetPCLK1Freq+0x14>)
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <HAL_RCC_GetPCLK1Freq+0x18>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001542:	5cd3      	ldrb	r3, [r2, r3]
 8001544:	4a03      	ldr	r2, [pc, #12]	; (8001554 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001546:	6810      	ldr	r0, [r2, #0]
}
 8001548:	40d8      	lsrs	r0, r3
 800154a:	4770      	bx	lr
 800154c:	40023800 	.word	0x40023800
 8001550:	080022f8 	.word	0x080022f8
 8001554:	20000008 	.word	0x20000008

08001558 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <HAL_RCC_GetPCLK2Freq+0x14>)
 800155a:	4a05      	ldr	r2, [pc, #20]	; (8001570 <HAL_RCC_GetPCLK2Freq+0x18>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001562:	5cd3      	ldrb	r3, [r2, r3]
 8001564:	4a03      	ldr	r2, [pc, #12]	; (8001574 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001566:	6810      	ldr	r0, [r2, #0]
}
 8001568:	40d8      	lsrs	r0, r3
 800156a:	4770      	bx	lr
 800156c:	40023800 	.word	0x40023800
 8001570:	080022f8 	.word	0x080022f8
 8001574:	20000008 	.word	0x20000008

08001578 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001578:	6802      	ldr	r2, [r0, #0]
 800157a:	68c1      	ldr	r1, [r0, #12]
 800157c:	6913      	ldr	r3, [r2, #16]
 800157e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001582:	430b      	orrs	r3, r1
{
 8001584:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001586:	6113      	str	r3, [r2, #16]
{
 8001588:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800158a:	6883      	ldr	r3, [r0, #8]
 800158c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800158e:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001590:	4303      	orrs	r3, r0
 8001592:	6968      	ldr	r0, [r5, #20]
 8001594:	4303      	orrs	r3, r0
 8001596:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8001598:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800159c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015a0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80015a2:	430b      	orrs	r3, r1
 80015a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015a6:	6953      	ldr	r3, [r2, #20]
 80015a8:	69a9      	ldr	r1, [r5, #24]
 80015aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015ae:	430b      	orrs	r3, r1
 80015b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80015b2:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <UART_SetConfig+0xb8>)
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d003      	beq.n	80015c0 <UART_SetConfig+0x48>
 80015b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015bc:	429a      	cmp	r2, r3
 80015be:	d123      	bne.n	8001608 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80015c0:	f7ff ffca 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015c4:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80015c6:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80015cc:	e9d5 4600 	ldrd	r4, r6, [r5]
 80015d0:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015d4:	d11b      	bne.n	800160e <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80015d6:	19b2      	adds	r2, r6, r6
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	415b      	adcs	r3, r3
 80015de:	f7fe fe05 	bl	80001ec <__aeabi_uldivmod>
 80015e2:	2164      	movs	r1, #100	; 0x64
 80015e4:	fbb0 f5f1 	udiv	r5, r0, r1
 80015e8:	fb01 0315 	mls	r3, r1, r5, r0
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	3332      	adds	r3, #50	; 0x32
 80015f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f4:	f003 0207 	and.w	r2, r3, #7
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80015fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001602:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001604:	60a3      	str	r3, [r4, #8]
  }
}
 8001606:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001608:	f7ff ff96 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 800160c:	e7da      	b.n	80015c4 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800160e:	00b2      	lsls	r2, r6, #2
 8001610:	0fb3      	lsrs	r3, r6, #30
 8001612:	f7fe fdeb 	bl	80001ec <__aeabi_uldivmod>
 8001616:	2264      	movs	r2, #100	; 0x64
 8001618:	fbb0 f1f2 	udiv	r1, r0, r2
 800161c:	fb02 0311 	mls	r3, r2, r1, r0
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	3332      	adds	r3, #50	; 0x32
 8001624:	fbb3 f3f2 	udiv	r3, r3, r2
 8001628:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800162c:	e7ea      	b.n	8001604 <UART_SetConfig+0x8c>
 800162e:	bf00      	nop
 8001630:	40011000 	.word	0x40011000

08001634 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8001634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001636:	4604      	mov	r4, r0
 8001638:	460e      	mov	r6, r1
 800163a:	4617      	mov	r7, r2
 800163c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800163e:	6822      	ldr	r2, [r4, #0]
 8001640:	6813      	ldr	r3, [r2, #0]
 8001642:	ea36 0303 	bics.w	r3, r6, r3
 8001646:	d101      	bne.n	800164c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8001648:	2000      	movs	r0, #0
 800164a:	e028      	b.n	800169e <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800164c:	1c6b      	adds	r3, r5, #1
 800164e:	d0f7      	beq.n	8001640 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001650:	b125      	cbz	r5, 800165c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8001652:	f7ff f949 	bl	80008e8 <HAL_GetTick>
 8001656:	1bc0      	subs	r0, r0, r7
 8001658:	4285      	cmp	r5, r0
 800165a:	d2f0      	bcs.n	800163e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800165c:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800165e:	f102 030c 	add.w	r3, r2, #12
 8001662:	e853 3f00 	ldrex	r3, [r3]
 8001666:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800166a:	320c      	adds	r2, #12
 800166c:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8001670:	6821      	ldr	r1, [r4, #0]
 8001672:	2800      	cmp	r0, #0
 8001674:	d1f2      	bne.n	800165c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001676:	f101 0314 	add.w	r3, r1, #20
 800167a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800167e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001682:	f101 0014 	add.w	r0, r1, #20
 8001686:	e840 3200 	strex	r2, r3, [r0]
 800168a:	2a00      	cmp	r2, #0
 800168c:	d1f3      	bne.n	8001676 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 800168e:	2320      	movs	r3, #32
 8001690:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8001694:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8001698:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 800169c:	2003      	movs	r0, #3
}
 800169e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080016a0 <HAL_UART_Init>:
{
 80016a0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80016a2:	4604      	mov	r4, r0
 80016a4:	b340      	cbz	r0, 80016f8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80016a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016ae:	b91b      	cbnz	r3, 80016b8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80016b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80016b4:	f7ff f85a 	bl	800076c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80016b8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80016ba:	2324      	movs	r3, #36	; 0x24
 80016bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80016c0:	68d3      	ldr	r3, [r2, #12]
 80016c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016c6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7ff ff55 	bl	8001578 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80016de:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016e6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016e8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80016ea:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016ec:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80016ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80016f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80016f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016f8:	2001      	movs	r0, #1
 80016fa:	e7fc      	b.n	80016f6 <HAL_UART_Init+0x56>

080016fc <HAL_UART_Transmit>:
{
 80016fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016fe:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001700:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8001704:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8001706:	2a20      	cmp	r2, #32
{
 8001708:	4604      	mov	r4, r0
 800170a:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800170c:	d149      	bne.n	80017a2 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 800170e:	2900      	cmp	r1, #0
 8001710:	d045      	beq.n	800179e <HAL_UART_Transmit+0xa2>
 8001712:	2f00      	cmp	r7, #0
 8001714:	d043      	beq.n	800179e <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8001716:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800171a:	2a01      	cmp	r2, #1
 800171c:	d041      	beq.n	80017a2 <HAL_UART_Transmit+0xa6>
 800171e:	2201      	movs	r2, #1
 8001720:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001724:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001726:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001728:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800172a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800172e:	f7ff f8db 	bl	80008e8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001732:	68a1      	ldr	r1, [r4, #8]
 8001734:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8001736:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001738:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800173c:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 800173e:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001740:	d103      	bne.n	800174a <HAL_UART_Transmit+0x4e>
 8001742:	6921      	ldr	r1, [r4, #16]
 8001744:	b909      	cbnz	r1, 800174a <HAL_UART_Transmit+0x4e>
 8001746:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001748:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 800174a:	2100      	movs	r1, #0
 800174c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8001750:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8001752:	b289      	uxth	r1, r1
 8001754:	b941      	cbnz	r1, 8001768 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001756:	2140      	movs	r1, #64	; 0x40
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff ff6b 	bl	8001634 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800175e:	b960      	cbnz	r0, 800177a <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8001760:	2320      	movs	r3, #32
 8001762:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8001766:	e009      	b.n	800177c <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	4620      	mov	r0, r4
 800176c:	e9cd 2300 	strd	r2, r3, [sp]
 8001770:	f7ff ff60 	bl	8001634 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001774:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001778:	b110      	cbz	r0, 8001780 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800177a:	2003      	movs	r0, #3
}
 800177c:	b003      	add	sp, #12
 800177e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001780:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 8001782:	b94e      	cbnz	r6, 8001798 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001784:	f835 1b02 	ldrh.w	r1, [r5], #2
 8001788:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800178c:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 800178e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8001790:	3901      	subs	r1, #1
 8001792:	b289      	uxth	r1, r1
 8001794:	84e1      	strh	r1, [r4, #38]	; 0x26
 8001796:	e7db      	b.n	8001750 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001798:	f816 1b01 	ldrb.w	r1, [r6], #1
 800179c:	e7f6      	b.n	800178c <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800179e:	2001      	movs	r0, #1
 80017a0:	e7ec      	b.n	800177c <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80017a2:	2002      	movs	r0, #2
 80017a4:	e7ea      	b.n	800177c <HAL_UART_Transmit+0x80>

080017a6 <HAL_UART_Receive>:
{
 80017a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017aa:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80017ac:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80017b0:	2b20      	cmp	r3, #32
{
 80017b2:	4604      	mov	r4, r0
 80017b4:	460f      	mov	r7, r1
 80017b6:	4615      	mov	r5, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80017b8:	d14d      	bne.n	8001856 <HAL_UART_Receive+0xb0>
    if ((pData == NULL) || (Size == 0U))
 80017ba:	2900      	cmp	r1, #0
 80017bc:	d049      	beq.n	8001852 <HAL_UART_Receive+0xac>
 80017be:	2a00      	cmp	r2, #0
 80017c0:	d047      	beq.n	8001852 <HAL_UART_Receive+0xac>
    __HAL_LOCK(huart);
 80017c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d045      	beq.n	8001856 <HAL_UART_Receive+0xb0>
 80017ca:	2301      	movs	r3, #1
 80017cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017d0:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80017d2:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017d4:	6406      	str	r6, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80017d6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017da:	6306      	str	r6, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 80017dc:	f7ff f884 	bl	80008e8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017e0:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 80017e2:	85a5      	strh	r5, [r4, #44]	; 0x2c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80017e8:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 80017ea:	85e5      	strh	r5, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017ec:	d103      	bne.n	80017f6 <HAL_UART_Receive+0x50>
 80017ee:	6923      	ldr	r3, [r4, #16]
 80017f0:	b90b      	cbnz	r3, 80017f6 <HAL_UART_Receive+0x50>
 80017f2:	463e      	mov	r6, r7
      pdata8bits  = NULL;
 80017f4:	461f      	mov	r7, r3
    __HAL_UNLOCK(huart);
 80017f6:	2300      	movs	r3, #0
 80017f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 80017fc:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 80017fe:	b2a8      	uxth	r0, r5
 8001800:	b920      	cbnz	r0, 800180c <HAL_UART_Receive+0x66>
    huart->RxState = HAL_UART_STATE_READY;
 8001802:	2320      	movs	r3, #32
 8001804:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8001808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800180c:	464b      	mov	r3, r9
 800180e:	4642      	mov	r2, r8
 8001810:	2120      	movs	r1, #32
 8001812:	4620      	mov	r0, r4
 8001814:	f7ff ff0e 	bl	8001634 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001818:	b9f8      	cbnz	r0, 800185a <HAL_UART_Receive+0xb4>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800181a:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800181c:	b94f      	cbnz	r7, 8001832 <HAL_UART_Receive+0x8c>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001824:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 8001828:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800182a:	3b01      	subs	r3, #1
 800182c:	b29b      	uxth	r3, r3
 800182e:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8001830:	e7e4      	b.n	80017fc <HAL_UART_Receive+0x56>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001832:	68a2      	ldr	r2, [r4, #8]
 8001834:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001838:	d002      	beq.n	8001840 <HAL_UART_Receive+0x9a>
 800183a:	b932      	cbnz	r2, 800184a <HAL_UART_Receive+0xa4>
 800183c:	6922      	ldr	r2, [r4, #16]
 800183e:	b922      	cbnz	r2, 800184a <HAL_UART_Receive+0xa4>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001840:	6859      	ldr	r1, [r3, #4]
 8001842:	b2c9      	uxtb	r1, r1
 8001844:	f807 1b01 	strb.w	r1, [r7], #1
        pdata8bits++;
 8001848:	e7ee      	b.n	8001828 <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001850:	e7f8      	b.n	8001844 <HAL_UART_Receive+0x9e>
      return  HAL_ERROR;
 8001852:	2001      	movs	r0, #1
 8001854:	e7d8      	b.n	8001808 <HAL_UART_Receive+0x62>
    return HAL_BUSY;
 8001856:	2002      	movs	r0, #2
 8001858:	e7d6      	b.n	8001808 <HAL_UART_Receive+0x62>
        return HAL_TIMEOUT;
 800185a:	2003      	movs	r0, #3
 800185c:	e7d4      	b.n	8001808 <HAL_UART_Receive+0x62>
	...

08001860 <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 8001860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001862:	220a      	movs	r2, #10
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 8001864:	4c0a      	ldr	r4, [pc, #40]	; (8001890 <Int2Str+0x30>)
 8001866:	2300      	movs	r3, #0
  for (i = 0; i < 10; i++)
  {
    p_str[pos++] = (intnum / divider) + 48;

    intnum = intnum % divider;
    divider /= 10;
 8001868:	4617      	mov	r7, r2
    p_str[pos++] = (intnum / divider) + 48;
 800186a:	fbb1 f6f4 	udiv	r6, r1, r4
 800186e:	f106 0530 	add.w	r5, r6, #48	; 0x30
 8001872:	b2ed      	uxtb	r5, r5
    if ((p_str[pos-1] == '0') & (status == 0))
 8001874:	2d30      	cmp	r5, #48	; 0x30
    intnum = intnum % divider;
 8001876:	fb04 1116 	mls	r1, r4, r6, r1
    p_str[pos++] = (intnum / divider) + 48;
 800187a:	54c5      	strb	r5, [r0, r3]
    divider /= 10;
 800187c:	fbb4 f4f7 	udiv	r4, r4, r7
    if ((p_str[pos-1] == '0') & (status == 0))
 8001880:	d100      	bne.n	8001884 <Int2Str+0x24>
 8001882:	b11b      	cbz	r3, 800188c <Int2Str+0x2c>
    p_str[pos++] = (intnum / divider) + 48;
 8001884:	3301      	adds	r3, #1
  for (i = 0; i < 10; i++)
 8001886:	3a01      	subs	r2, #1
 8001888:	d1ef      	bne.n	800186a <Int2Str+0xa>
    else
    {
      status++;
    }
  }
}
 800188a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pos = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	e7fa      	b.n	8001886 <Int2Str+0x26>
 8001890:	3b9aca00 	.word	0x3b9aca00

08001894 <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0, res = 0;
  uint32_t val = 0;

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 8001896:	7803      	ldrb	r3, [r0, #0]
 8001898:	2b30      	cmp	r3, #48	; 0x30
{
 800189a:	4604      	mov	r4, r0
  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 800189c:	d104      	bne.n	80018a8 <Str2Int+0x14>
 800189e:	7843      	ldrb	r3, [r0, #1]
 80018a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80018a4:	2b58      	cmp	r3, #88	; 0x58
 80018a6:	d013      	beq.n	80018d0 <Str2Int+0x3c>
 80018a8:	2300      	movs	r3, #0
 80018aa:	461a      	mov	r2, r3
        *p_intnum = val;
        res = 1;
      }
      else if (ISVALIDDEC(p_inputstr[i]))
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 80018ac:	260a      	movs	r6, #10
      if (p_inputstr[i] == '\0')
 80018ae:	5ca0      	ldrb	r0, [r4, r2]
 80018b0:	bb60      	cbnz	r0, 800190c <Str2Int+0x78>
        *p_intnum = val;
 80018b2:	600b      	str	r3, [r1, #0]
        res = 1;
 80018b4:	2001      	movs	r0, #1
      {
        /* return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 80018b6:	3201      	adds	r2, #1
    while ( ( i < 11 ) && ( res != 1 ) )
 80018b8:	2a0b      	cmp	r2, #11
 80018ba:	d023      	beq.n	8001904 <Str2Int+0x70>
 80018bc:	2800      	cmp	r0, #0
 80018be:	d0f6      	beq.n	80018ae <Str2Int+0x1a>
 80018c0:	e020      	b.n	8001904 <Str2Int+0x70>
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 80018c2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80018c6:	2a05      	cmp	r2, #5
 80018c8:	bf94      	ite	ls
 80018ca:	3b37      	subls	r3, #55	; 0x37
 80018cc:	3b57      	subhi	r3, #87	; 0x57
 80018ce:	e012      	b.n	80018f6 <Str2Int+0x62>
 80018d0:	2000      	movs	r0, #0
 80018d2:	2502      	movs	r5, #2
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80018d4:	5d63      	ldrb	r3, [r4, r5]
 80018d6:	b193      	cbz	r3, 80018fe <Str2Int+0x6a>
      if (ISVALIDHEX(p_inputstr[i]))
 80018d8:	f023 0620 	bic.w	r6, r3, #32
 80018dc:	3e41      	subs	r6, #65	; 0x41
 80018de:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80018e2:	2e05      	cmp	r6, #5
 80018e4:	b2d7      	uxtb	r7, r2
 80018e6:	d901      	bls.n	80018ec <Str2Int+0x58>
 80018e8:	2f09      	cmp	r7, #9
 80018ea:	d808      	bhi.n	80018fe <Str2Int+0x6a>
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 80018ec:	2f09      	cmp	r7, #9
 80018ee:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80018f2:	d8e6      	bhi.n	80018c2 <Str2Int+0x2e>
 80018f4:	4613      	mov	r3, r2
      i++;
 80018f6:	3501      	adds	r5, #1
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80018f8:	2d0b      	cmp	r5, #11
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 80018fa:	4418      	add	r0, r3
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80018fc:	d1ea      	bne.n	80018d4 <Str2Int+0x40>
    if (p_inputstr[i] == '\0')
 80018fe:	5d63      	ldrb	r3, [r4, r5]
 8001900:	b10b      	cbz	r3, 8001906 <Str2Int+0x72>
      res = 1;
 8001902:	2000      	movs	r0, #0
    }
  }

  return res;
}
 8001904:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *p_intnum = val;
 8001906:	6008      	str	r0, [r1, #0]
      res = 1;
 8001908:	2001      	movs	r0, #1
 800190a:	e7fb      	b.n	8001904 <Str2Int+0x70>
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 800190c:	f000 05df 	and.w	r5, r0, #223	; 0xdf
 8001910:	2d4b      	cmp	r5, #75	; 0x4b
 8001912:	d102      	bne.n	800191a <Str2Int+0x86>
 8001914:	b11a      	cbz	r2, 800191e <Str2Int+0x8a>
        val = val << 10;
 8001916:	029b      	lsls	r3, r3, #10
 8001918:	e7cb      	b.n	80018b2 <Str2Int+0x1e>
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 800191a:	2d4d      	cmp	r5, #77	; 0x4d
 800191c:	d008      	beq.n	8001930 <Str2Int+0x9c>
      else if (ISVALIDDEC(p_inputstr[i]))
 800191e:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
 8001922:	2d09      	cmp	r5, #9
 8001924:	d8ed      	bhi.n	8001902 <Str2Int+0x6e>
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 8001926:	fb06 0303 	mla	r3, r6, r3, r0
 800192a:	3b30      	subs	r3, #48	; 0x30
 800192c:	2000      	movs	r0, #0
 800192e:	e7c2      	b.n	80018b6 <Str2Int+0x22>
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 8001930:	2a00      	cmp	r2, #0
 8001932:	d0e6      	beq.n	8001902 <Str2Int+0x6e>
        val = val << 20;
 8001934:	051b      	lsls	r3, r3, #20
        *p_intnum = val;
 8001936:	e7bc      	b.n	80018b2 <Str2Int+0x1e>

08001938 <Serial_PutString>:
  */
void Serial_PutString(uint8_t *p_string)
{
  uint16_t length = 0;

  while (p_string[length] != '\0')
 8001938:	2300      	movs	r3, #0
 800193a:	b29a      	uxth	r2, r3
 800193c:	3301      	adds	r3, #1
 800193e:	5c81      	ldrb	r1, [r0, r2]
 8001940:	2900      	cmp	r1, #0
 8001942:	d1fa      	bne.n	800193a <Serial_PutString+0x2>
  {
    length++;
  }
  HAL_UART_Transmit(&huart2, p_string, length, TX_TIMEOUT);
 8001944:	4601      	mov	r1, r0
 8001946:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800194a:	4801      	ldr	r0, [pc, #4]	; (8001950 <Serial_PutString+0x18>)
 800194c:	f7ff bed6 	b.w	80016fc <HAL_UART_Transmit>
 8001950:	20000040 	.word	0x20000040

08001954 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 8001954:	b507      	push	{r0, r1, r2, lr}
  /* May be timeouted... */
  if ( huart2.gState == HAL_UART_STATE_TIMEOUT )
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <Serial_PutByte+0x2c>)
{
 8001958:	f88d 0007 	strb.w	r0, [sp, #7]
  if ( huart2.gState == HAL_UART_STATE_TIMEOUT )
 800195c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
  {
    huart2.gState = HAL_UART_STATE_READY;
  }
  return HAL_UART_Transmit(&huart2, &param, 1, TX_TIMEOUT);
 8001960:	4807      	ldr	r0, [pc, #28]	; (8001980 <Serial_PutByte+0x2c>)
  if ( huart2.gState == HAL_UART_STATE_TIMEOUT )
 8001962:	2aa0      	cmp	r2, #160	; 0xa0
    huart2.gState = HAL_UART_STATE_READY;
 8001964:	bf04      	itt	eq
 8001966:	2220      	moveq	r2, #32
 8001968:	f883 203d 	strbeq.w	r2, [r3, #61]	; 0x3d
  return HAL_UART_Transmit(&huart2, &param, 1, TX_TIMEOUT);
 800196c:	f10d 0107 	add.w	r1, sp, #7
 8001970:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001974:	2201      	movs	r2, #1
 8001976:	f7ff fec1 	bl	80016fc <HAL_UART_Transmit>
}
 800197a:	b003      	add	sp, #12
 800197c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001980:	20000040 	.word	0x20000040

08001984 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 8001984:	b508      	push	{r3, lr}
  /* Unlock the Program memory */
  HAL_FLASH_Unlock();
 8001986:	f7ff f8b1 	bl	8000aec <HAL_FLASH_Unlock>

  /* Clear all FLASH flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGAERR|FLASH_FLAG_PGPERR| FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);
 800198a:	4b03      	ldr	r3, [pc, #12]	; (8001998 <FLASH_If_Init+0x14>)
 800198c:	22f1      	movs	r2, #241	; 0xf1
 800198e:	60da      	str	r2, [r3, #12]
  /* Unlock the Program memory */
  HAL_FLASH_Lock();
}
 8001990:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_FLASH_Lock();
 8001994:	f7ff b8bc 	b.w	8000b10 <HAL_FLASH_Lock>
 8001998:	40023c00 	.word	0x40023c00

0800199c <FLASH_If_Erase>:
  * @param  start: start of user flash area
  * @retval FLASHIF_OK : user flash area successfully erased
  *         FLASHIF_ERASEKO : error occurred
  */
uint32_t FLASH_If_Erase(uint32_t start)
{
 800199c:	b510      	push	{r4, lr}
 800199e:	b086      	sub	sp, #24
  uint32_t NbrOfPages = 0;
  uint32_t PageError = 0;
 80019a0:	2400      	movs	r4, #0
 80019a2:	9400      	str	r4, [sp, #0]
  FLASH_EraseInitTypeDef pEraseInit;
  HAL_StatusTypeDef status = HAL_OK;

  /* Unlock the Flash to enable the flash control register access *************/ 
  HAL_FLASH_Unlock();
 80019a4:	f7ff f8a2 	bl	8000aec <HAL_FLASH_Unlock>
  //pEraseInit.NbPages = NbrOfPages;


  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
  pEraseInit.Sector = FLASH_SECTOR_1|FLASH_SECTOR_2 |FLASH_SECTOR_3 | FLASH_SECTOR_4 | FLASH_SECTOR_5|FLASH_SECTOR_6 |FLASH_SECTOR_7;
  pEraseInit.NbSectors = 1;
 80019a8:	2207      	movs	r2, #7
 80019aa:	2301      	movs	r3, #1
 80019ac:	e9cd 2303 	strd	r2, r3, [sp, #12]
  pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;


  status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80019b0:	4669      	mov	r1, sp
  pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80019b2:	2302      	movs	r3, #2
  status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80019b4:	a801      	add	r0, sp, #4
  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80019b6:	9401      	str	r4, [sp, #4]
  pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80019b8:	9305      	str	r3, [sp, #20]
  status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80019ba:	f7ff fa1f 	bl	8000dfc <HAL_FLASHEx_Erase>
 80019be:	4604      	mov	r4, r0

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 80019c0:	f7ff f8a6 	bl	8000b10 <HAL_FLASH_Lock>
    /* Error occurred while page erase */
    return FLASHIF_ERASEKO;
  }

  return FLASHIF_OK;
}
 80019c4:	1e20      	subs	r0, r4, #0
 80019c6:	bf18      	it	ne
 80019c8:	2001      	movne	r0, #1
 80019ca:	b006      	add	sp, #24
 80019cc:	bd10      	pop	{r4, pc}
	...

080019d0 <FLASH_If_Write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 80019d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019d4:	460d      	mov	r5, r1
 80019d6:	4604      	mov	r4, r0
 80019d8:	4617      	mov	r7, r2
  uint32_t i = 0;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 80019da:	f7ff f887 	bl	8000aec <HAL_FLASH_Unlock>

  for (i = 0; (i < length) && (destination <= (USER_FLASH_END_ADDRESS-4)); i++)
 80019de:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8001a20 <FLASH_If_Write+0x50>
 80019e2:	3d04      	subs	r5, #4
 80019e4:	2600      	movs	r6, #0
 80019e6:	42be      	cmp	r6, r7
 80019e8:	d001      	beq.n	80019ee <FLASH_If_Write+0x1e>
 80019ea:	4544      	cmp	r4, r8
 80019ec:	d904      	bls.n	80019f8 <FLASH_If_Write+0x28>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 80019ee:	f7ff f88f 	bl	8000b10 <HAL_FLASH_Lock>

  return (FLASHIF_OK);
 80019f2:	2000      	movs	r0, #0
}
 80019f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destination, *(uint32_t*)(p_source+i)) == HAL_OK)      
 80019f8:	686a      	ldr	r2, [r5, #4]
 80019fa:	2300      	movs	r3, #0
 80019fc:	4621      	mov	r1, r4
 80019fe:	2002      	movs	r0, #2
 8001a00:	f7ff f8ca 	bl	8000b98 <HAL_FLASH_Program>
 8001a04:	b938      	cbnz	r0, 8001a16 <FLASH_If_Write+0x46>
      if (*(uint32_t*)destination != *(uint32_t*)(p_source+i))
 8001a06:	6822      	ldr	r2, [r4, #0]
 8001a08:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d104      	bne.n	8001a1a <FLASH_If_Write+0x4a>
      destination += 4;
 8001a10:	3404      	adds	r4, #4
  for (i = 0; (i < length) && (destination <= (USER_FLASH_END_ADDRESS-4)); i++)
 8001a12:	3601      	adds	r6, #1
 8001a14:	e7e7      	b.n	80019e6 <FLASH_If_Write+0x16>
      return (FLASHIF_WRITING_ERROR);
 8001a16:	2003      	movs	r0, #3
 8001a18:	e7ec      	b.n	80019f4 <FLASH_If_Write+0x24>
        return(FLASHIF_WRITINGCTRL_ERROR);
 8001a1a:	2002      	movs	r0, #2
 8001a1c:	e7ea      	b.n	80019f4 <FLASH_If_Write+0x24>
 8001a1e:	bf00      	nop
 8001a20:	0803fffc 	.word	0x0803fffc

08001a24 <FLASH_If_GetWriteProtectionStatus>:
  * @retval If a sector in application area is write-protected returned value is a combinaison
            of the possible values : FLASHIF_PROTECTION_WRPENABLED, FLASHIF_PROTECTION_PCROPENABLED, ...
  *         If no sector is write-protected FLASHIF_PROTECTION_NONE is returned.
  */
uint32_t FLASH_If_GetWriteProtectionStatus(void)
{
 8001a24:	b500      	push	{lr}
 8001a26:	b089      	sub	sp, #36	; 0x24
  uint32_t ProtectedPAGE = FLASHIF_PROTECTION_NONE;
  FLASH_OBProgramInitTypeDef OptionsBytesStruct;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8001a28:	f7ff f860 	bl	8000aec <HAL_FLASH_Unlock>

  /* Check if there are write protected sectors inside the user flash area ****/
  HAL_FLASHEx_OBGetConfig(&OptionsBytesStruct);
 8001a2c:	a801      	add	r0, sp, #4
 8001a2e:	f7ff f96f 	bl	8000d10 <HAL_FLASHEx_OBGetConfig>

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8001a32:	f7ff f86d 	bl	8000b10 <HAL_FLASH_Lock>

  /* Get pages already write protected ****************************************/
  ProtectedPAGE = ~(OptionsBytesStruct.WRPSector) & FLASH_PAGE_TO_BE_PROTECTED;
 8001a36:	9803      	ldr	r0, [sp, #12]
 8001a38:	43c0      	mvns	r0, r0

  /* Check if desired pages are already write protected ***********************/
  if(ProtectedPAGE != 0)
  {
    /* Some sectors inside the user flash area are write protected */
    return FLASHIF_PROTECTION_WRPENABLED;
 8001a3a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
  else
  { 
    /* No write protected sectors inside the user flash area */
    return FLASHIF_PROTECTION_NONE;
  }
}
 8001a3e:	bf18      	it	ne
 8001a40:	2002      	movne	r0, #2
 8001a42:	b009      	add	sp, #36	; 0x24
 8001a44:	f85d fb04 	ldr.w	pc, [sp], #4

08001a48 <FLASH_If_WriteProtectionConfig>:
  * @brief  Configure the write protection status of user flash area.
  * @param  protectionstate : FLASHIF_WRP_DISABLE or FLASHIF_WRP_ENABLE the protection
  * @retval uint32_t FLASHIF_OK if change is applied.
  */
uint32_t FLASH_If_WriteProtectionConfig(uint32_t protectionstate)
{
 8001a48:	b510      	push	{r4, lr}
 8001a4a:	b08e      	sub	sp, #56	; 0x38
 8001a4c:	4604      	mov	r4, r0
  FLASH_OBProgramInitTypeDef config_new, config_old;
  HAL_StatusTypeDef result = HAL_OK;
  

  /* Get pages write protection status ****************************************/
  HAL_FLASHEx_OBGetConfig(&config_old);
 8001a4e:	a807      	add	r0, sp, #28
 8001a50:	f7ff f95e 	bl	8000d10 <HAL_FLASHEx_OBGetConfig>

  /* The parameter says whether we turn the protection on or off */
  config_new.WRPState = (protectionstate == FLASHIF_WRP_ENABLE ? OB_WRPSTATE_ENABLE : OB_WRPSTATE_DISABLE);

  /* We want to modify only the Write protection */
  config_new.OptionType = OPTIONBYTE_WRP;
 8001a54:	2301      	movs	r3, #1
  config_new.WRPState = (protectionstate == FLASHIF_WRP_ENABLE ? OB_WRPSTATE_ENABLE : OB_WRPSTATE_DISABLE);
 8001a56:	fab4 f484 	clz	r4, r4
  config_new.OptionType = OPTIONBYTE_WRP;
 8001a5a:	9300      	str	r3, [sp, #0]
  
  /* No read protection, keep BOR and reset settings */
  config_new.RDPLevel = OB_RDP_LEVEL_0;
 8001a5c:	23aa      	movs	r3, #170	; 0xaa
  config_new.WRPState = (protectionstate == FLASHIF_WRP_ENABLE ? OB_WRPSTATE_ENABLE : OB_WRPSTATE_DISABLE);
 8001a5e:	0964      	lsrs	r4, r4, #5
  config_new.RDPLevel = OB_RDP_LEVEL_0;
 8001a60:	9304      	str	r3, [sp, #16]
  config_new.USERConfig = config_old.USERConfig;  
 8001a62:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8001a66:	f88d 3018 	strb.w	r3, [sp, #24]
  config_new.WRPState = (protectionstate == FLASHIF_WRP_ENABLE ? OB_WRPSTATE_ENABLE : OB_WRPSTATE_DISABLE);
 8001a6a:	9401      	str	r4, [sp, #4]
  /* Get pages already write protected ****************************************/
  ProtectedPAGE = config_old.WRPSector | FLASH_PAGE_TO_BE_PROTECTED;
 8001a6c:	9c09      	ldr	r4, [sp, #36]	; 0x24

  /* Unlock the Flash to enable the flash control register access *************/ 
  HAL_FLASH_Unlock();
 8001a6e:	f7ff f83d 	bl	8000aec <HAL_FLASH_Unlock>

  /* Unlock the Options Bytes *************************************************/
  HAL_FLASH_OB_Unlock();
 8001a72:	f7ff f857 	bl	8000b24 <HAL_FLASH_OB_Unlock>
  
  /* Erase all the option Bytes ***********************************************/
  result = HAL_FLASHEx_OB_DeSelectPCROP();
 8001a76:	f7ff f965 	bl	8000d44 <HAL_FLASHEx_OB_DeSelectPCROP>
    
  if (result == HAL_OK)
 8001a7a:	b930      	cbnz	r0, 8001a8a <FLASH_If_WriteProtectionConfig+0x42>
  ProtectedPAGE = config_old.WRPSector | FLASH_PAGE_TO_BE_PROTECTED;
 8001a7c:	f044 04ff 	orr.w	r4, r4, #255	; 0xff
  {
    config_new.WRPSector    = ProtectedPAGE;
    result = HAL_FLASHEx_OBProgram(&config_new);
 8001a80:	4668      	mov	r0, sp
    config_new.WRPSector    = ProtectedPAGE;
 8001a82:	9402      	str	r4, [sp, #8]
    result = HAL_FLASHEx_OBProgram(&config_new);
 8001a84:	f7ff f8ec 	bl	8000c60 <HAL_FLASHEx_OBProgram>
  }
  
  return (result == HAL_OK ? FLASHIF_OK: FLASHIF_PROTECTION_ERRROR);
 8001a88:	b100      	cbz	r0, 8001a8c <FLASH_If_WriteProtectionConfig+0x44>
 8001a8a:	2004      	movs	r0, #4
}
 8001a8c:	b00e      	add	sp, #56	; 0x38
 8001a8e:	bd10      	pop	{r4, pc}

08001a90 <SerialDownload>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void SerialDownload(void)
{
 8001a90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t number[11] = {0};
 8001a92:	2300      	movs	r3, #0
  uint32_t size = 0;
  COM_StatusTypeDef result;

  Serial_PutString("Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 8001a94:	4818      	ldr	r0, [pc, #96]	; (8001af8 <SerialDownload+0x68>)
  uint32_t size = 0;
 8001a96:	9300      	str	r3, [sp, #0]
  uint8_t number[11] = {0};
 8001a98:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001a9c:	f8cd 300b 	str.w	r3, [sp, #11]
  Serial_PutString("Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 8001aa0:	f7ff ff4a 	bl	8001938 <Serial_PutString>
  result = Ymodem_Receive( &size );
 8001aa4:	4668      	mov	r0, sp
 8001aa6:	f000 f93d 	bl	8001d24 <Ymodem_Receive>
  if (result == COM_OK)
 8001aaa:	b9c0      	cbnz	r0, 8001ade <SerialDownload+0x4e>
  {
    Serial_PutString("\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 8001aac:	4813      	ldr	r0, [pc, #76]	; (8001afc <SerialDownload+0x6c>)
 8001aae:	f7ff ff43 	bl	8001938 <Serial_PutString>
    Serial_PutString(aFileName);
 8001ab2:	4813      	ldr	r0, [pc, #76]	; (8001b00 <SerialDownload+0x70>)
 8001ab4:	f7ff ff40 	bl	8001938 <Serial_PutString>
    Int2Str(number, size);
 8001ab8:	9900      	ldr	r1, [sp, #0]
 8001aba:	a801      	add	r0, sp, #4
 8001abc:	f7ff fed0 	bl	8001860 <Int2Str>
    Serial_PutString("\n\r Size: ");
 8001ac0:	4810      	ldr	r0, [pc, #64]	; (8001b04 <SerialDownload+0x74>)
 8001ac2:	f7ff ff39 	bl	8001938 <Serial_PutString>
    Serial_PutString(number);
 8001ac6:	a801      	add	r0, sp, #4
 8001ac8:	f7ff ff36 	bl	8001938 <Serial_PutString>
    Serial_PutString(" Bytes\r\n");
 8001acc:	480e      	ldr	r0, [pc, #56]	; (8001b08 <SerialDownload+0x78>)
 8001ace:	f7ff ff33 	bl	8001938 <Serial_PutString>
    Serial_PutString("-------------------\n");
 8001ad2:	480e      	ldr	r0, [pc, #56]	; (8001b0c <SerialDownload+0x7c>)
  {
    Serial_PutString("\r\n\nAborted by user.\n\r");
  }
  else
  {
    Serial_PutString("\n\rFailed to receive the file!\n\r");
 8001ad4:	f7ff ff30 	bl	8001938 <Serial_PutString>
  }
}
 8001ad8:	b005      	add	sp, #20
 8001ada:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (result == COM_LIMIT)
 8001ade:	2805      	cmp	r0, #5
 8001ae0:	d101      	bne.n	8001ae6 <SerialDownload+0x56>
    Serial_PutString("\n\n\rThe image size is higher than the allowed space memory!\n\r");
 8001ae2:	480b      	ldr	r0, [pc, #44]	; (8001b10 <SerialDownload+0x80>)
 8001ae4:	e7f6      	b.n	8001ad4 <SerialDownload+0x44>
  else if (result == COM_DATA)
 8001ae6:	2804      	cmp	r0, #4
 8001ae8:	d101      	bne.n	8001aee <SerialDownload+0x5e>
    Serial_PutString("\n\n\rVerification failed!\n\r");
 8001aea:	480a      	ldr	r0, [pc, #40]	; (8001b14 <SerialDownload+0x84>)
 8001aec:	e7f2      	b.n	8001ad4 <SerialDownload+0x44>
  else if (result == COM_ABORT)
 8001aee:	2802      	cmp	r0, #2
    Serial_PutString("\r\n\nAborted by user.\n\r");
 8001af0:	bf0c      	ite	eq
 8001af2:	4809      	ldreq	r0, [pc, #36]	; (8001b18 <SerialDownload+0x88>)
    Serial_PutString("\n\rFailed to receive the file!\n\r");
 8001af4:	4809      	ldrne	r0, [pc, #36]	; (8001b1c <SerialDownload+0x8c>)
 8001af6:	e7ed      	b.n	8001ad4 <SerialDownload+0x44>
 8001af8:	08002300 	.word	0x08002300
 8001afc:	0800233b 	.word	0x0800233b
 8001b00:	200000b4 	.word	0x200000b4
 8001b04:	0800238e 	.word	0x0800238e
 8001b08:	08002398 	.word	0x08002398
 8001b0c:	080023a1 	.word	0x080023a1
 8001b10:	080023b6 	.word	0x080023b6
 8001b14:	080023f3 	.word	0x080023f3
 8001b18:	0800240d 	.word	0x0800240d
 8001b1c:	08002423 	.word	0x08002423

08001b20 <SerialUpload>:
  * @brief  Upload a file via serial port.
  * @param  None
  * @retval None
  */
void SerialUpload(void)
{
 8001b20:	b507      	push	{r0, r1, r2, lr}
  uint8_t status = 0;
 8001b22:	2300      	movs	r3, #0

  Serial_PutString("\n\n\rSelect Receive File\n\r");
 8001b24:	4810      	ldr	r0, [pc, #64]	; (8001b68 <SerialUpload+0x48>)
  uint8_t status = 0;
 8001b26:	f88d 3007 	strb.w	r3, [sp, #7]
  Serial_PutString("\n\n\rSelect Receive File\n\r");
 8001b2a:	f7ff ff05 	bl	8001938 <Serial_PutString>

  HAL_UART_Receive(&huart2, &status, 1, RX_TIMEOUT);
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	480e      	ldr	r0, [pc, #56]	; (8001b6c <SerialUpload+0x4c>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	f10d 0107 	add.w	r1, sp, #7
 8001b3a:	f7ff fe34 	bl	80017a6 <HAL_UART_Receive>
  if ( status == CRC16)
 8001b3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001b42:	2b43      	cmp	r3, #67	; 0x43
 8001b44:	d10b      	bne.n	8001b5e <SerialUpload+0x3e>
  {
    /* Transmit the flash image through ymodem protocol */
    status = Ymodem_Transmit((uint8_t*)APPLICATION_ADDRESS, (const uint8_t*)"UploadedFlashImage.bin", USER_FLASH_SIZE);
 8001b46:	490a      	ldr	r1, [pc, #40]	; (8001b70 <SerialUpload+0x50>)
 8001b48:	480a      	ldr	r0, [pc, #40]	; (8001b74 <SerialUpload+0x54>)
 8001b4a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001b4e:	f000 fa03 	bl	8001f58 <Ymodem_Transmit>
 8001b52:	f88d 0007 	strb.w	r0, [sp, #7]

    if (status != 0)
 8001b56:	b128      	cbz	r0, 8001b64 <SerialUpload+0x44>
    {
      Serial_PutString("\n\rError Occurred while Transmitting File\n\r");
 8001b58:	4807      	ldr	r0, [pc, #28]	; (8001b78 <SerialUpload+0x58>)
    }
    else
    {
      Serial_PutString("\n\rFile uploaded successfully \n\r");
 8001b5a:	f7ff feed 	bl	8001938 <Serial_PutString>
    }
  }
}
 8001b5e:	b003      	add	sp, #12
 8001b60:	f85d fb04 	ldr.w	pc, [sp], #4
      Serial_PutString("\n\rFile uploaded successfully \n\r");
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <SerialUpload+0x5c>)
 8001b66:	e7f8      	b.n	8001b5a <SerialUpload+0x3a>
 8001b68:	08002443 	.word	0x08002443
 8001b6c:	20000040 	.word	0x20000040
 8001b70:	0800245c 	.word	0x0800245c
 8001b74:	08004000 	.word	0x08004000
 8001b78:	08002473 	.word	0x08002473
 8001b7c:	0800249e 	.word	0x0800249e

08001b80 <Main_Menu>:
  * @brief  Display the Main Menu on HyperTerminal
  * @param  None
  * @retval None
  */
void Main_Menu(void)
{
 8001b80:	b583      	push	{r0, r1, r7, lr}
  uint8_t key = 0;
 8001b82:	2300      	movs	r3, #0

  Serial_PutString("\r\n======================================================================");
 8001b84:	483c      	ldr	r0, [pc, #240]	; (8001c78 <Main_Menu+0xf8>)
  uint8_t key = 0;
 8001b86:	f88d 3007 	strb.w	r3, [sp, #7]
  Serial_PutString("\r\n======================================================================");
 8001b8a:	f7ff fed5 	bl	8001938 <Serial_PutString>
  Serial_PutString("\r\n=              (C) COPYRIGHT 2015 STMicroelectronics                 =");
 8001b8e:	483b      	ldr	r0, [pc, #236]	; (8001c7c <Main_Menu+0xfc>)
  Serial_PutString("\r\n=                                   By MCD Application Team          =");
  Serial_PutString("\r\n======================================================================");
  Serial_PutString("\r\n\r\n");

  /* Test if any sector of Flash memory where user application will be loaded is write protected */
  FlashProtection = FLASH_If_GetWriteProtectionStatus();
 8001b90:	4c3b      	ldr	r4, [pc, #236]	; (8001c80 <Main_Menu+0x100>)

  while (1)
  {

    Serial_PutString("\r\n=================== Main Menu ============================\r\n\n");
 8001b92:	4d3c      	ldr	r5, [pc, #240]	; (8001c84 <Main_Menu+0x104>)
    Serial_PutString("  Download image to the internal Flash ----------------- 1\r\n\n");
 8001b94:	4e3c      	ldr	r6, [pc, #240]	; (8001c88 <Main_Menu+0x108>)
    Serial_PutString("  Upload image from the internal Flash ----------------- 2\r\n\n");
 8001b96:	4f3d      	ldr	r7, [pc, #244]	; (8001c8c <Main_Menu+0x10c>)
  Serial_PutString("\r\n=              (C) COPYRIGHT 2015 STMicroelectronics                 =");
 8001b98:	f7ff fece 	bl	8001938 <Serial_PutString>
  Serial_PutString("\r\n=                                                                    =");
 8001b9c:	483c      	ldr	r0, [pc, #240]	; (8001c90 <Main_Menu+0x110>)
 8001b9e:	f7ff fecb 	bl	8001938 <Serial_PutString>
  Serial_PutString("\r\n=  STM32F1xx In-Application Programming Application  (Version 1.0.0) =");
 8001ba2:	483c      	ldr	r0, [pc, #240]	; (8001c94 <Main_Menu+0x114>)
 8001ba4:	f7ff fec8 	bl	8001938 <Serial_PutString>
  Serial_PutString("\r\n=                                                                    =");
 8001ba8:	4839      	ldr	r0, [pc, #228]	; (8001c90 <Main_Menu+0x110>)
 8001baa:	f7ff fec5 	bl	8001938 <Serial_PutString>
  Serial_PutString("\r\n=                                   By MCD Application Team          =");
 8001bae:	483a      	ldr	r0, [pc, #232]	; (8001c98 <Main_Menu+0x118>)
 8001bb0:	f7ff fec2 	bl	8001938 <Serial_PutString>
  Serial_PutString("\r\n======================================================================");
 8001bb4:	4830      	ldr	r0, [pc, #192]	; (8001c78 <Main_Menu+0xf8>)
 8001bb6:	f7ff febf 	bl	8001938 <Serial_PutString>
  Serial_PutString("\r\n\r\n");
 8001bba:	4838      	ldr	r0, [pc, #224]	; (8001c9c <Main_Menu+0x11c>)
 8001bbc:	f7ff febc 	bl	8001938 <Serial_PutString>
  FlashProtection = FLASH_If_GetWriteProtectionStatus();
 8001bc0:	f7ff ff30 	bl	8001a24 <FLASH_If_GetWriteProtectionStatus>
 8001bc4:	6020      	str	r0, [r4, #0]
    Serial_PutString("\r\n=================== Main Menu ============================\r\n\n");
 8001bc6:	4628      	mov	r0, r5
 8001bc8:	f7ff feb6 	bl	8001938 <Serial_PutString>
    Serial_PutString("  Download image to the internal Flash ----------------- 1\r\n\n");
 8001bcc:	4630      	mov	r0, r6
 8001bce:	f7ff feb3 	bl	8001938 <Serial_PutString>
    Serial_PutString("  Upload image from the internal Flash ----------------- 2\r\n\n");
 8001bd2:	4638      	mov	r0, r7
 8001bd4:	f7ff feb0 	bl	8001938 <Serial_PutString>
    Serial_PutString("  Execute the loaded application ----------------------- 3\r\n\n");
 8001bd8:	4831      	ldr	r0, [pc, #196]	; (8001ca0 <Main_Menu+0x120>)
 8001bda:	f7ff fead 	bl	8001938 <Serial_PutString>


    if(FlashProtection != FLASHIF_PROTECTION_NONE)
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	b1c3      	cbz	r3, 8001c14 <Main_Menu+0x94>
    {
      Serial_PutString("  Disable the write protection ------------------------- 4\r\n\n");
 8001be2:	4830      	ldr	r0, [pc, #192]	; (8001ca4 <Main_Menu+0x124>)
    }
    else
    {
      Serial_PutString("  Enable the write protection -------------------------- 4\r\n\n");
 8001be4:	f7ff fea8 	bl	8001938 <Serial_PutString>
    }
    Serial_PutString("==========================================================\r\n\n");
 8001be8:	482f      	ldr	r0, [pc, #188]	; (8001ca8 <Main_Menu+0x128>)
 8001bea:	f7ff fea5 	bl	8001938 <Serial_PutString>

    /* Clean the input path */
    __HAL_UART_FLUSH_DRREGISTER(&huart2);
 8001bee:	482f      	ldr	r0, [pc, #188]	; (8001cac <Main_Menu+0x12c>)
 8001bf0:	6803      	ldr	r3, [r0, #0]
	
    /* Receive key */
    HAL_UART_Receive(&huart2, &key, 1, RX_TIMEOUT);
 8001bf2:	2201      	movs	r2, #1
    __HAL_UART_FLUSH_DRREGISTER(&huart2);
 8001bf4:	685b      	ldr	r3, [r3, #4]
    HAL_UART_Receive(&huart2, &key, 1, RX_TIMEOUT);
 8001bf6:	f10d 0107 	add.w	r1, sp, #7
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	f7ff fdd2 	bl	80017a6 <HAL_UART_Receive>

    switch (key)
 8001c02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001c06:	3b31      	subs	r3, #49	; 0x31
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d833      	bhi.n	8001c74 <Main_Menu+0xf4>
 8001c0c:	e8df f003 	tbb	[pc, r3]
 8001c10:	180a0704 	.word	0x180a0704
      Serial_PutString("  Enable the write protection -------------------------- 4\r\n\n");
 8001c14:	4826      	ldr	r0, [pc, #152]	; (8001cb0 <Main_Menu+0x130>)
 8001c16:	e7e5      	b.n	8001be4 <Main_Menu+0x64>
    {
    case '1' :
      /* Download user application in the Flash */
      SerialDownload();
 8001c18:	f7ff ff3a 	bl	8001a90 <SerialDownload>
      break;
 8001c1c:	e7d3      	b.n	8001bc6 <Main_Menu+0x46>
    case '2' :
      /* Upload user application from the Flash */
      SerialUpload();
 8001c1e:	f7ff ff7f 	bl	8001b20 <SerialUpload>
      break;
 8001c22:	e7d0      	b.n	8001bc6 <Main_Menu+0x46>
    case '3' :
      Serial_PutString("Start program execution......\r\n\n");
 8001c24:	4823      	ldr	r0, [pc, #140]	; (8001cb4 <Main_Menu+0x134>)
 8001c26:	f7ff fe87 	bl	8001938 <Serial_PutString>
      /* execute the new program */
      JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8001c2a:	4a23      	ldr	r2, [pc, #140]	; (8001cb8 <Main_Menu+0x138>)
 8001c2c:	4923      	ldr	r1, [pc, #140]	; (8001cbc <Main_Menu+0x13c>)
 8001c2e:	6853      	ldr	r3, [r2, #4]
 8001c30:	600b      	str	r3, [r1, #0]
      /* Jump to user application */
      JumpToApplication = (pFunction) JumpAddress;
 8001c32:	4923      	ldr	r1, [pc, #140]	; (8001cc0 <Main_Menu+0x140>)
      /* Initialize user application's Stack Pointer */
      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8001c34:	6812      	ldr	r2, [r2, #0]
      JumpToApplication = (pFunction) JumpAddress;
 8001c36:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001c38:	f382 8808 	msr	MSP, r2
      JumpToApplication();
 8001c3c:	4798      	blx	r3
      break;
 8001c3e:	e7c2      	b.n	8001bc6 <Main_Menu+0x46>
    case '4' :
      if (FlashProtection != FLASHIF_PROTECTION_NONE)
 8001c40:	6820      	ldr	r0, [r4, #0]
 8001c42:	b180      	cbz	r0, 8001c66 <Main_Menu+0xe6>
      {
        /* Disable the write protection */
        if (FLASH_If_WriteProtectionConfig(FLASHIF_WRP_DISABLE) == FLASHIF_OK)
 8001c44:	2001      	movs	r0, #1
 8001c46:	f7ff feff 	bl	8001a48 <FLASH_If_WriteProtectionConfig>
 8001c4a:	b940      	cbnz	r0, 8001c5e <Main_Menu+0xde>
        {
          Serial_PutString("Write Protection disabled...\r\n");
 8001c4c:	481d      	ldr	r0, [pc, #116]	; (8001cc4 <Main_Menu+0x144>)
      }
      else
      {
        if (FLASH_If_WriteProtectionConfig(FLASHIF_WRP_ENABLE) == FLASHIF_OK)
        {
          Serial_PutString("Write Protection enabled...\r\n");
 8001c4e:	f7ff fe73 	bl	8001938 <Serial_PutString>
          Serial_PutString("System will now restart...\r\n");
 8001c52:	481d      	ldr	r0, [pc, #116]	; (8001cc8 <Main_Menu+0x148>)
 8001c54:	f7ff fe70 	bl	8001938 <Serial_PutString>
          /* Launch the option byte loading */
          HAL_FLASH_OB_Launch();
 8001c58:	f7fe ffe4 	bl	8000c24 <HAL_FLASH_OB_Launch>
 8001c5c:	e7b3      	b.n	8001bc6 <Main_Menu+0x46>
          Serial_PutString("Error: Flash write un-protection failed...\r\n");
 8001c5e:	481b      	ldr	r0, [pc, #108]	; (8001ccc <Main_Menu+0x14c>)
          Serial_PutString("Error: Flash write protection failed...\r\n");
        }
      }
      break;
	default:
	Serial_PutString("Invalid Number ! ==> The number should be either 1, 2, 3 or 4\r");
 8001c60:	f7ff fe6a 	bl	8001938 <Serial_PutString>
	break;
 8001c64:	e7af      	b.n	8001bc6 <Main_Menu+0x46>
        if (FLASH_If_WriteProtectionConfig(FLASHIF_WRP_ENABLE) == FLASHIF_OK)
 8001c66:	f7ff feef 	bl	8001a48 <FLASH_If_WriteProtectionConfig>
 8001c6a:	b908      	cbnz	r0, 8001c70 <Main_Menu+0xf0>
          Serial_PutString("Write Protection enabled...\r\n");
 8001c6c:	4818      	ldr	r0, [pc, #96]	; (8001cd0 <Main_Menu+0x150>)
 8001c6e:	e7ee      	b.n	8001c4e <Main_Menu+0xce>
          Serial_PutString("Error: Flash write protection failed...\r\n");
 8001c70:	4818      	ldr	r0, [pc, #96]	; (8001cd4 <Main_Menu+0x154>)
 8001c72:	e7f5      	b.n	8001c60 <Main_Menu+0xe0>
	Serial_PutString("Invalid Number ! ==> The number should be either 1, 2, 3 or 4\r");
 8001c74:	4818      	ldr	r0, [pc, #96]	; (8001cd8 <Main_Menu+0x158>)
 8001c76:	e7f3      	b.n	8001c60 <Main_Menu+0xe0>
 8001c78:	080024be 	.word	0x080024be
 8001c7c:	08002507 	.word	0x08002507
 8001c80:	200000a8 	.word	0x200000a8
 8001c84:	08002630 	.word	0x08002630
 8001c88:	08002670 	.word	0x08002670
 8001c8c:	080026ae 	.word	0x080026ae
 8001c90:	08002550 	.word	0x08002550
 8001c94:	08002599 	.word	0x08002599
 8001c98:	080025e2 	.word	0x080025e2
 8001c9c:	0800262b 	.word	0x0800262b
 8001ca0:	080026ec 	.word	0x080026ec
 8001ca4:	0800272a 	.word	0x0800272a
 8001ca8:	080027a6 	.word	0x080027a6
 8001cac:	20000040 	.word	0x20000040
 8001cb0:	08002768 	.word	0x08002768
 8001cb4:	080027e4 	.word	0x080027e4
 8001cb8:	08004000 	.word	0x08004000
 8001cbc:	200000ac 	.word	0x200000ac
 8001cc0:	200000b0 	.word	0x200000b0
 8001cc4:	08002805 	.word	0x08002805
 8001cc8:	08002824 	.word	0x08002824
 8001ccc:	08002841 	.word	0x08002841
 8001cd0:	0800286e 	.word	0x0800286e
 8001cd4:	0800288c 	.word	0x0800288c
 8001cd8:	080028b6 	.word	0x080028b6

08001cdc <UpdateCRC16>:
  * @retval None
  */
uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
{
  uint32_t crc = crc_in;
  uint32_t in = byte | 0x100;
 8001cdc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
    crc <<= 1;
    in <<= 1;
    if(in & 0x100)
      ++crc;
    if(crc & 0x10000)
      crc ^= 0x1021;
 8001ce0:	f241 0321 	movw	r3, #4129	; 0x1021
    in <<= 1;
 8001ce4:	0049      	lsls	r1, r1, #1
    crc <<= 1;
 8001ce6:	0040      	lsls	r0, r0, #1
    if(in & 0x100)
 8001ce8:	05ca      	lsls	r2, r1, #23
      ++crc;
 8001cea:	bf48      	it	mi
 8001cec:	3001      	addmi	r0, #1
    if(crc & 0x10000)
 8001cee:	03c2      	lsls	r2, r0, #15
      crc ^= 0x1021;
 8001cf0:	bf48      	it	mi
 8001cf2:	4058      	eormi	r0, r3
  }
  
  while(!(in & 0x10000));
 8001cf4:	03ca      	lsls	r2, r1, #15
 8001cf6:	d5f5      	bpl.n	8001ce4 <UpdateCRC16+0x8>

  return crc & 0xffffu;
}
 8001cf8:	b280      	uxth	r0, r0
 8001cfa:	4770      	bx	lr

08001cfc <Cal_CRC16>:
  * @param  data
  * @param  length
  * @retval None
  */
uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
{
 8001cfc:	b538      	push	{r3, r4, r5, lr}
 8001cfe:	4604      	mov	r4, r0
  uint32_t crc = 0;
  const uint8_t* dataEnd = p_data+size;
 8001d00:	1845      	adds	r5, r0, r1
  uint32_t crc = 0;
 8001d02:	2000      	movs	r0, #0

  while(p_data < dataEnd)
 8001d04:	42ac      	cmp	r4, r5
    crc = UpdateCRC16(crc, *p_data++);
 8001d06:	b280      	uxth	r0, r0
  while(p_data < dataEnd)
 8001d08:	d307      	bcc.n	8001d1a <Cal_CRC16+0x1e>
 
  crc = UpdateCRC16(crc, 0);
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	f7ff ffe6 	bl	8001cdc <UpdateCRC16>
  crc = UpdateCRC16(crc, 0);

  return crc&0xffffu;
}
 8001d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  crc = UpdateCRC16(crc, 0);
 8001d14:	2100      	movs	r1, #0
 8001d16:	f7ff bfe1 	b.w	8001cdc <UpdateCRC16>
    crc = UpdateCRC16(crc, *p_data++);
 8001d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d1e:	f7ff ffdd 	bl	8001cdc <UpdateCRC16>
 8001d22:	e7ef      	b.n	8001d04 <Cal_CRC16+0x8>

08001d24 <Ymodem_Receive>:
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 8001d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d28:	b089      	sub	sp, #36	; 0x24
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 8001d2a:	2300      	movs	r3, #0
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], tmp, packets_received;
  COM_StatusTypeDef result = COM_OK;

  /* Initialize flashdestination variable */
  flashdestination = APPLICATION_ADDRESS;
 8001d2c:	f8df b21c 	ldr.w	fp, [pc, #540]	; 8001f4c <Ymodem_Receive+0x228>
    *p_data = char1;
 8001d30:	4f83      	ldr	r7, [pc, #524]	; (8001f40 <Ymodem_Receive+0x21c>)
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 8001d32:	9300      	str	r3, [sp, #0]
{
 8001d34:	4682      	mov	sl, r0
                    Serial_PutByte(CA);
                    result = COM_DATA;
                  }
                }
                packets_received ++;
                session_begin = 1;
 8001d36:	2600      	movs	r6, #0
  status = HAL_UART_Receive(&huart2, &char1, 1, timeout);
 8001d38:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8001f54 <Ymodem_Receive+0x230>
                session_begin = 1;
 8001d3c:	46b0      	mov	r8, r6
 8001d3e:	e08d      	b.n	8001e5c <Ymodem_Receive+0x138>
    switch (char1)
 8001d40:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8001d44:	2a41      	cmp	r2, #65	; 0x41
 8001d46:	d014      	beq.n	8001d72 <Ymodem_Receive+0x4e>
 8001d48:	2b18      	cmp	r3, #24
 8001d4a:	d115      	bne.n	8001d78 <Ymodem_Receive+0x54>
        if ((HAL_UART_Receive(&huart2, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 8001d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d50:	2201      	movs	r2, #1
 8001d52:	f10d 010b 	add.w	r1, sp, #11
 8001d56:	4648      	mov	r0, r9
 8001d58:	f7ff fd25 	bl	80017a6 <HAL_UART_Receive>
 8001d5c:	b960      	cbnz	r0, 8001d78 <Ymodem_Receive+0x54>
 8001d5e:	f89d 300b 	ldrb.w	r3, [sp, #11]
          packet_size = 2;
 8001d62:	2b18      	cmp	r3, #24
 8001d64:	bf16      	itet	ne
 8001d66:	2500      	movne	r5, #0
 8001d68:	2502      	moveq	r5, #2
 8001d6a:	2001      	movne	r0, #1
 8001d6c:	e092      	b.n	8001e94 <Ymodem_Receive+0x170>
    switch (char1)
 8001d6e:	2580      	movs	r5, #128	; 0x80
 8001d70:	e090      	b.n	8001e94 <Ymodem_Receive+0x170>
        status = HAL_BUSY;
 8001d72:	2002      	movs	r0, #2
  uint32_t packet_size = 0;
 8001d74:	4625      	mov	r5, r4
 8001d76:	e08d      	b.n	8001e94 <Ymodem_Receive+0x170>
          status = HAL_ERROR;
 8001d78:	2001      	movs	r0, #1
 8001d7a:	e7fb      	b.n	8001d74 <Ymodem_Receive+0x50>
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 8001d7c:	b188      	cbz	r0, 8001da2 <Ymodem_Receive+0x7e>
 8001d7e:	2802      	cmp	r0, #2
 8001d80:	f000 80d7 	beq.w	8001f32 <Ymodem_Receive+0x20e>
          Serial_PutByte(CA);
          Serial_PutByte(CA);
          result = COM_ABORT;
          break;
        default:
          if (session_begin > 0)
 8001d84:	9b00      	ldr	r3, [sp, #0]
 8001d86:	b10b      	cbz	r3, 8001d8c <Ymodem_Receive+0x68>
          {
            errors ++;
 8001d88:	f108 0801 	add.w	r8, r8, #1
          }
          if (errors > MAX_ERRORS)
 8001d8c:	f1b8 0f05 	cmp.w	r8, #5
 8001d90:	f240 80d4 	bls.w	8001f3c <Ymodem_Receive+0x218>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 8001d94:	2018      	movs	r0, #24
 8001d96:	f7ff fddd 	bl	8001954 <Serial_PutByte>
            Serial_PutByte(CA);
 8001d9a:	2018      	movs	r0, #24
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 8001d9c:	f7ff fdda 	bl	8001954 <Serial_PutByte>
 8001da0:	e05c      	b.n	8001e5c <Ymodem_Receive+0x138>
          switch (packet_length)
 8001da2:	b13d      	cbz	r5, 8001db4 <Ymodem_Receive+0x90>
 8001da4:	2d02      	cmp	r5, #2
 8001da6:	f040 809a 	bne.w	8001ede <Ymodem_Receive+0x1ba>
              Serial_PutByte(ACK);
 8001daa:	2006      	movs	r0, #6
          Serial_PutByte(CA);
 8001dac:	f7ff fdd2 	bl	8001954 <Serial_PutByte>
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 8001db0:	2402      	movs	r4, #2
          }
          break;
      }
    }
  }
  return result;
 8001db2:	e0a9      	b.n	8001f08 <Ymodem_Receive+0x1e4>
              Serial_PutByte(ACK);
 8001db4:	2006      	movs	r0, #6
 8001db6:	f7ff fdcd 	bl	8001954 <Serial_PutByte>
  while ((session_done == 0) && (result == COM_OK))
 8001dba:	e7bc      	b.n	8001d36 <Ymodem_Receive+0x12>
                if (packets_received == 0)
 8001dbc:	2e00      	cmp	r6, #0
 8001dbe:	f040 80a7 	bne.w	8001f10 <Ymodem_Receive+0x1ec>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 8001dc2:	793c      	ldrb	r4, [r7, #4]
 8001dc4:	2c00      	cmp	r4, #0
 8001dc6:	f000 809c 	beq.w	8001f02 <Ymodem_Receive+0x1de>
 8001dca:	4b5e      	ldr	r3, [pc, #376]	; (8001f44 <Ymodem_Receive+0x220>)
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 8001dcc:	495e      	ldr	r1, [pc, #376]	; (8001f48 <Ymodem_Receive+0x224>)
                    i = 0;
 8001dce:	4632      	mov	r2, r6
 8001dd0:	461c      	mov	r4, r3
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 8001dd2:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001dd6:	b110      	cbz	r0, 8001dde <Ymodem_Receive+0xba>
 8001dd8:	2a40      	cmp	r2, #64	; 0x40
 8001dda:	f040 808a 	bne.w	8001ef2 <Ymodem_Receive+0x1ce>
                    aFileName[i++] = '\0';
 8001dde:	2300      	movs	r3, #0
 8001de0:	54a3      	strb	r3, [r4, r2]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 8001de2:	aa04      	add	r2, sp, #16
 8001de4:	4610      	mov	r0, r2
 8001de6:	5ccc      	ldrb	r4, [r1, r3]
 8001de8:	2c20      	cmp	r4, #32
 8001dea:	d002      	beq.n	8001df2 <Ymodem_Receive+0xce>
 8001dec:	2b10      	cmp	r3, #16
 8001dee:	f040 8084 	bne.w	8001efa <Ymodem_Receive+0x1d6>
                    file_size[i++] = '\0';
 8001df2:	3320      	adds	r3, #32
 8001df4:	446b      	add	r3, sp
 8001df6:	2400      	movs	r4, #0
 8001df8:	f803 4c10 	strb.w	r4, [r3, #-16]
                    Str2Int(file_size, &filesize);
 8001dfc:	a903      	add	r1, sp, #12
 8001dfe:	f7ff fd49 	bl	8001894 <Str2Int>
                    if (*p_size > (USER_FLASH_SIZE + 1))
 8001e02:	f8da 2000 	ldr.w	r2, [sl]
 8001e06:	f243 0301 	movw	r3, #12289	; 0x3001
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d913      	bls.n	8001e36 <Ymodem_Receive+0x112>
                      tmp = CA;
 8001e0e:	2318      	movs	r3, #24
 8001e10:	f88d 300a 	strb.w	r3, [sp, #10]
                      HAL_UART_Transmit(&huart2, &tmp, 1, NAK_TIMEOUT);
 8001e14:	2201      	movs	r2, #1
 8001e16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e1a:	f10d 010a 	add.w	r1, sp, #10
 8001e1e:	4648      	mov	r0, r9
 8001e20:	f7ff fc6c 	bl	80016fc <HAL_UART_Transmit>
                      HAL_UART_Transmit(&huart2, &tmp, 1, NAK_TIMEOUT);
 8001e24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f10d 010a 	add.w	r1, sp, #10
 8001e2e:	4648      	mov	r0, r9
 8001e30:	f7ff fc64 	bl	80016fc <HAL_UART_Transmit>
                      result = COM_LIMIT;
 8001e34:	2405      	movs	r4, #5
                    FLASH_If_Erase(APPLICATION_ADDRESS);
 8001e36:	4845      	ldr	r0, [pc, #276]	; (8001f4c <Ymodem_Receive+0x228>)
 8001e38:	f7ff fdb0 	bl	800199c <FLASH_If_Erase>
                    *p_size = filesize;
 8001e3c:	9b03      	ldr	r3, [sp, #12]
 8001e3e:	f8ca 3000 	str.w	r3, [sl]
                    Serial_PutByte(ACK);
 8001e42:	2006      	movs	r0, #6
 8001e44:	f7ff fd86 	bl	8001954 <Serial_PutByte>
                    Serial_PutByte(CRC16);
 8001e48:	2043      	movs	r0, #67	; 0x43
                    Serial_PutByte(ACK);
 8001e4a:	f7ff fd83 	bl	8001954 <Serial_PutByte>
                packets_received ++;
 8001e4e:	3601      	adds	r6, #1
 8001e50:	b2f6      	uxtb	r6, r6
    while ((file_done == 0) && (result == COM_OK))
 8001e52:	2c00      	cmp	r4, #0
 8001e54:	d158      	bne.n	8001f08 <Ymodem_Receive+0x1e4>
                session_begin = 1;
 8001e56:	2301      	movs	r3, #1
          errors = 0;
 8001e58:	46a0      	mov	r8, r4
                session_begin = 1;
 8001e5a:	9300      	str	r3, [sp, #0]
  status = HAL_UART_Receive(&huart2, &char1, 1, timeout);
 8001e5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e60:	2201      	movs	r2, #1
 8001e62:	f10d 010b 	add.w	r1, sp, #11
 8001e66:	4648      	mov	r0, r9
 8001e68:	f7ff fc9d 	bl	80017a6 <HAL_UART_Receive>
  if (status == HAL_OK)
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	2800      	cmp	r0, #0
 8001e70:	d185      	bne.n	8001d7e <Ymodem_Receive+0x5a>
    switch (char1)
 8001e72:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	f43f af7c 	beq.w	8001d74 <Ymodem_Receive+0x50>
 8001e7c:	f63f af60 	bhi.w	8001d40 <Ymodem_Receive+0x1c>
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	f43f af74 	beq.w	8001d6e <Ymodem_Receive+0x4a>
  status = HAL_UART_Receive(&huart2, &char1, 1, timeout);
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	bf15      	itete	ne
 8001e8a:	2001      	movne	r0, #1
 8001e8c:	2000      	moveq	r0, #0
 8001e8e:	2500      	movne	r5, #0
 8001e90:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    *p_data = char1;
 8001e94:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001e98:	703b      	strb	r3, [r7, #0]
    if (packet_size >= PACKET_SIZE )
 8001e9a:	2d7f      	cmp	r5, #127	; 0x7f
 8001e9c:	f67f af6e 	bls.w	8001d7c <Ymodem_Receive+0x58>
      status = HAL_UART_Receive(&huart2, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 8001ea0:	492b      	ldr	r1, [pc, #172]	; (8001f50 <Ymodem_Receive+0x22c>)
 8001ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea6:	1d2a      	adds	r2, r5, #4
 8001ea8:	4648      	mov	r0, r9
 8001eaa:	f7ff fc7c 	bl	80017a6 <HAL_UART_Receive>
      if (status == HAL_OK )
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	f47f af65 	bne.w	8001d7e <Ymodem_Receive+0x5a>
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	78ba      	ldrb	r2, [r7, #2]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	f47f af61 	bne.w	8001d84 <Ymodem_Receive+0x60>
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 8001ec2:	197a      	adds	r2, r7, r5
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 8001ec4:	4820      	ldr	r0, [pc, #128]	; (8001f48 <Ymodem_Receive+0x224>)
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 8001ec6:	7911      	ldrb	r1, [r2, #4]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 8001ec8:	7953      	ldrb	r3, [r2, #5]
 8001eca:	eb03 2301 	add.w	r3, r3, r1, lsl #8
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 8001ece:	4629      	mov	r1, r5
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 8001ed0:	9301      	str	r3, [sp, #4]
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 8001ed2:	f7ff ff13 	bl	8001cfc <Cal_CRC16>
 8001ed6:	9b01      	ldr	r3, [sp, #4]
 8001ed8:	4283      	cmp	r3, r0
 8001eda:	f47f af53 	bne.w	8001d84 <Ymodem_Receive+0x60>
              if (aPacketData[PACKET_NUMBER_INDEX] != packets_received)
 8001ede:	78bb      	ldrb	r3, [r7, #2]
 8001ee0:	42b3      	cmp	r3, r6
 8001ee2:	f43f af6b 	beq.w	8001dbc <Ymodem_Receive+0x98>
                Serial_PutByte(NAK);
 8001ee6:	2015      	movs	r0, #21
 8001ee8:	f7ff fd34 	bl	8001954 <Serial_PutByte>
          errors = 0;
 8001eec:	f04f 0800 	mov.w	r8, #0
 8001ef0:	e7b4      	b.n	8001e5c <Ymodem_Receive+0x138>
                      aFileName[i++] = *file_ptr++;
 8001ef2:	f803 0b01 	strb.w	r0, [r3], #1
 8001ef6:	3201      	adds	r2, #1
 8001ef8:	e76b      	b.n	8001dd2 <Ymodem_Receive+0xae>
                      file_size[i++] = *file_ptr++;
 8001efa:	f802 4b01 	strb.w	r4, [r2], #1
 8001efe:	3301      	adds	r3, #1
 8001f00:	e771      	b.n	8001de6 <Ymodem_Receive+0xc2>
                    Serial_PutByte(ACK);
 8001f02:	2006      	movs	r0, #6
 8001f04:	f7ff fd26 	bl	8001954 <Serial_PutByte>
}
 8001f08:	4620      	mov	r0, r4
 8001f0a:	b009      	add	sp, #36	; 0x24
 8001f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  if (FLASH_If_Write(flashdestination, (uint32_t*) ramsource, packet_length/4) == FLASHIF_OK)                   
 8001f10:	490d      	ldr	r1, [pc, #52]	; (8001f48 <Ymodem_Receive+0x224>)
 8001f12:	08aa      	lsrs	r2, r5, #2
 8001f14:	4658      	mov	r0, fp
 8001f16:	f7ff fd5b 	bl	80019d0 <FLASH_If_Write>
 8001f1a:	b910      	cbnz	r0, 8001f22 <Ymodem_Receive+0x1fe>
                    flashdestination += packet_length;
 8001f1c:	44ab      	add	fp, r5
                    Serial_PutByte(ACK);
 8001f1e:	2006      	movs	r0, #6
 8001f20:	e793      	b.n	8001e4a <Ymodem_Receive+0x126>
                    Serial_PutByte(CA);
 8001f22:	2018      	movs	r0, #24
 8001f24:	f7ff fd16 	bl	8001954 <Serial_PutByte>
                    Serial_PutByte(CA);
 8001f28:	2018      	movs	r0, #24
 8001f2a:	f7ff fd13 	bl	8001954 <Serial_PutByte>
                    result = COM_DATA;
 8001f2e:	2404      	movs	r4, #4
 8001f30:	e78d      	b.n	8001e4e <Ymodem_Receive+0x12a>
          Serial_PutByte(CA);
 8001f32:	2018      	movs	r0, #24
 8001f34:	f7ff fd0e 	bl	8001954 <Serial_PutByte>
          Serial_PutByte(CA);
 8001f38:	2018      	movs	r0, #24
 8001f3a:	e737      	b.n	8001dac <Ymodem_Receive+0x88>
            Serial_PutByte(CRC16); /* Ask for a packet */
 8001f3c:	2043      	movs	r0, #67	; 0x43
 8001f3e:	e72d      	b.n	8001d9c <Ymodem_Receive+0x78>
 8001f40:	200000f4 	.word	0x200000f4
 8001f44:	200000b4 	.word	0x200000b4
 8001f48:	200000f8 	.word	0x200000f8
 8001f4c:	08004000 	.word	0x08004000
 8001f50:	200000f6 	.word	0x200000f6
 8001f54:	20000040 	.word	0x20000040

08001f58 <Ymodem_Transmit>:
  * @param  p_file_name: Name of the file sent
  * @param  file_size: Size of the transmission
  * @retval COM_StatusTypeDef result of the communication
  */
COM_StatusTypeDef Ymodem_Transmit (uint8_t *p_buf, const uint8_t *p_file_name, uint32_t file_size)
{
 8001f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  p_data[PACKET_START_INDEX] = SOH;
 8001f5c:	4dae      	ldr	r5, [pc, #696]	; (8002218 <Ymodem_Transmit+0x2c0>)
 8001f5e:	2301      	movs	r3, #1
 8001f60:	706b      	strb	r3, [r5, #1]
  p_data[PACKET_CNUMBER_INDEX] = 0xff;
 8001f62:	462b      	mov	r3, r5
{
 8001f64:	b087      	sub	sp, #28
 8001f66:	4616      	mov	r6, r2
  p_data[PACKET_CNUMBER_INDEX] = 0xff;
 8001f68:	22ff      	movs	r2, #255	; 0xff
  p_data[PACKET_NUMBER_INDEX] = 0x00;
 8001f6a:	2400      	movs	r4, #0
  p_data[PACKET_CNUMBER_INDEX] = 0xff;
 8001f6c:	f803 2f03 	strb.w	r2, [r3, #3]!
{
 8001f70:	9001      	str	r0, [sp, #4]
  p_data[PACKET_NUMBER_INDEX] = 0x00;
 8001f72:	70ac      	strb	r4, [r5, #2]
  for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++)
 8001f74:	5d0a      	ldrb	r2, [r1, r4]
 8001f76:	b10a      	cbz	r2, 8001f7c <Ymodem_Transmit+0x24>
 8001f78:	2c40      	cmp	r4, #64	; 0x40
 8001f7a:	d160      	bne.n	800203e <Ymodem_Transmit+0xe6>
  p_data[i + PACKET_DATA_INDEX] = 0x00;
 8001f7c:	192b      	adds	r3, r5, r4
 8001f7e:	2200      	movs	r2, #0
 8001f80:	711a      	strb	r2, [r3, #4]
  Int2Str (astring, length);
 8001f82:	a803      	add	r0, sp, #12
 8001f84:	4631      	mov	r1, r6
 8001f86:	f7ff fc6b 	bl	8001860 <Int2Str>
  i = i + PACKET_DATA_INDEX + 1;
 8001f8a:	1d60      	adds	r0, r4, #5
  while (astring[j] != '\0')
 8001f8c:	ab03      	add	r3, sp, #12
 8001f8e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8001f92:	2c00      	cmp	r4, #0
 8001f94:	d157      	bne.n	8002046 <Ymodem_Transmit+0xee>
    p_data[j] = 0;
 8001f96:	2884      	cmp	r0, #132	; 0x84
 8001f98:	f1c0 0284 	rsb	r2, r0, #132	; 0x84
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	bf88      	it	hi
 8001fa0:	2200      	movhi	r2, #0
 8001fa2:	4428      	add	r0, r5
 8001fa4:	f000 f964 	bl	8002270 <memset>
  PrepareIntialPacket(aPacketData, p_file_name, file_size);

  while (( !ack_recpt ) && ( result == COM_OK ))
  {
    /* Send Packet */
    HAL_UART_Transmit(&huart2, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 8001fa8:	f8df 9270 	ldr.w	r9, [pc, #624]	; 800221c <Ymodem_Transmit+0x2c4>
 8001fac:	f8df 8274 	ldr.w	r8, [pc, #628]	; 8002224 <Ymodem_Transmit+0x2cc>
 8001fb0:	489a      	ldr	r0, [pc, #616]	; (800221c <Ymodem_Transmit+0x2c4>)
 8001fb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fb6:	2283      	movs	r2, #131	; 0x83
 8001fb8:	4641      	mov	r1, r8
 8001fba:	f7ff fb9f 	bl	80016fc <HAL_UART_Transmit>

    /* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F    
    temp_crc = Cal_CRC16(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 8001fbe:	2180      	movs	r1, #128	; 0x80
 8001fc0:	4897      	ldr	r0, [pc, #604]	; (8002220 <Ymodem_Transmit+0x2c8>)
 8001fc2:	f7ff fe9b 	bl	8001cfc <Cal_CRC16>
 8001fc6:	4607      	mov	r7, r0
    Serial_PutByte(temp_crc >> 8);
 8001fc8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001fcc:	f7ff fcc2 	bl	8001954 <Serial_PutByte>
    Serial_PutByte(temp_crc & 0xFF);
 8001fd0:	b2f8      	uxtb	r0, r7
 8001fd2:	f7ff fcbf 	bl	8001954 <Serial_PutByte>
    temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
    Serial_PutByte(temp_chksum);
#endif /* CRC16_F */

    /* Wait for Ack and 'C' */
    if (HAL_UART_Receive(&huart2, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8001fd6:	4891      	ldr	r0, [pc, #580]	; (800221c <Ymodem_Transmit+0x2c4>)
 8001fd8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fdc:	2201      	movs	r2, #1
 8001fde:	a903      	add	r1, sp, #12
 8001fe0:	f7ff fbe1 	bl	80017a6 <HAL_UART_Receive>
 8001fe4:	bb90      	cbnz	r0, 800204c <Ymodem_Transmit+0xf4>
    {
      if (a_rx_ctrl[0] == ACK)
 8001fe6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d033      	beq.n	8002056 <Ymodem_Transmit+0xfe>
      {
        ack_recpt = 1;
      }
      else if (a_rx_ctrl[0] == CA)
 8001fee:	2b18      	cmp	r3, #24
 8001ff0:	d12d      	bne.n	800204e <Ymodem_Transmit+0xf6>
      {
        if ((HAL_UART_Receive(&huart2, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == CA))
 8001ff2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	a903      	add	r1, sp, #12
 8001ffa:	4648      	mov	r0, r9
 8001ffc:	f7ff fbd3 	bl	80017a6 <HAL_UART_Receive>
 8002000:	bb28      	cbnz	r0, 800204e <Ymodem_Transmit+0xf6>
 8002002:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002006:	2b18      	cmp	r3, #24
 8002008:	d121      	bne.n	800204e <Ymodem_Transmit+0xf6>
        {
          HAL_Delay( 2 );
 800200a:	2002      	movs	r0, #2
 800200c:	f7fe fc72 	bl	80008f4 <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&huart2);
 8002010:	f8d9 3000 	ldr.w	r3, [r9]
    {
      errors++;
    }
    if (errors >= MAX_ERRORS)
    {
      result = COM_ERROR;
 8002014:	2c05      	cmp	r4, #5
          __HAL_UART_FLUSH_DRREGISTER(&huart2);
 8002016:	685b      	ldr	r3, [r3, #4]
      result = COM_ERROR;
 8002018:	bf34      	ite	cc
 800201a:	2402      	movcc	r4, #2
 800201c:	2401      	movcs	r4, #1
      }

      /* Resend packet if NAK  for a count of 10 else end of communication */
      if (errors >= MAX_ERRORS)
      {
        result = COM_ERROR;
 800201e:	f04f 0a01 	mov.w	sl, #1
  while ((size) && (result == COM_OK ))
 8002022:	b106      	cbz	r6, 8002026 <Ymodem_Transmit+0xce>
 8002024:	b1e4      	cbz	r4, 8002060 <Ymodem_Transmit+0x108>
    }
  }

  /* Sending End Of Transmission char */
  ack_recpt = 0;
  a_rx_ctrl[0] = 0x00;
 8002026:	2600      	movs	r6, #0
  while (( !ack_recpt ) && ( result == COM_OK ))
  {
    Serial_PutByte(EOT);

    /* Wait for Ack */
    if (HAL_UART_Receive(&huart2, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8002028:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 800221c <Ymodem_Transmit+0x2c4>
  a_rx_ctrl[0] = 0x00;
 800202c:	f88d 600c 	strb.w	r6, [sp, #12]
  while (( !ack_recpt ) && ( result == COM_OK ))
 8002030:	2c00      	cmp	r4, #0
 8002032:	f000 8085 	beq.w	8002140 <Ymodem_Transmit+0x1e8>
      }
    }
  }

  return result; /* file transmitted successfully */
}
 8002036:	4620      	mov	r0, r4
 8002038:	b007      	add	sp, #28
 800203a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p_data[i + PACKET_DATA_INDEX] = p_file_name[i];
 800203e:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++)
 8002042:	3401      	adds	r4, #1
 8002044:	e796      	b.n	8001f74 <Ymodem_Transmit+0x1c>
    p_data[i++] = astring[j++];
 8002046:	542c      	strb	r4, [r5, r0]
 8002048:	3001      	adds	r0, #1
 800204a:	e7a0      	b.n	8001f8e <Ymodem_Transmit+0x36>
      errors++;
 800204c:	3401      	adds	r4, #1
    if (errors >= MAX_ERRORS)
 800204e:	2c04      	cmp	r4, #4
 8002050:	d9ae      	bls.n	8001fb0 <Ymodem_Transmit+0x58>
      result = COM_ERROR;
 8002052:	2401      	movs	r4, #1
 8002054:	e7e3      	b.n	800201e <Ymodem_Transmit+0xc6>
 8002056:	2c04      	cmp	r4, #4
 8002058:	bf94      	ite	ls
 800205a:	2400      	movls	r4, #0
 800205c:	2401      	movhi	r4, #1
 800205e:	e7de      	b.n	800201e <Ymodem_Transmit+0xc6>
  packet_size = size_blk >= PACKET_1K_SIZE ? PACKET_1K_SIZE : PACKET_SIZE;
 8002060:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    PreparePacket(p_buf_int, aPacketData, blk_number, size);
 8002064:	fa5f f18a 	uxtb.w	r1, sl
  packet_size = size_blk >= PACKET_1K_SIZE ? PACKET_1K_SIZE : PACKET_SIZE;
 8002068:	d257      	bcs.n	800211a <Ymodem_Transmit+0x1c2>
  size = size_blk < packet_size ? size_blk : packet_size;
 800206a:	2e80      	cmp	r6, #128	; 0x80
 800206c:	4632      	mov	r2, r6
    p_packet[PACKET_START_INDEX] = SOH;
 800206e:	f04f 0001 	mov.w	r0, #1
  size = size_blk < packet_size ? size_blk : packet_size;
 8002072:	bf28      	it	cs
 8002074:	2280      	movcs	r2, #128	; 0x80
  packet_size = size_blk >= PACKET_1K_SIZE ? PACKET_1K_SIZE : PACKET_SIZE;
 8002076:	2380      	movs	r3, #128	; 0x80
  p_packet[PACKET_NUMBER_INDEX] = pkt_nr;
 8002078:	70a9      	strb	r1, [r5, #2]
  p_packet[PACKET_CNUMBER_INDEX] = (~pkt_nr);
 800207a:	43c9      	mvns	r1, r1
 800207c:	70e9      	strb	r1, [r5, #3]
  p_record = p_source;
 800207e:	9c01      	ldr	r4, [sp, #4]
 8002080:	7068      	strb	r0, [r5, #1]
  for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX;i++)
 8002082:	2104      	movs	r1, #4
 8002084:	1850      	adds	r0, r2, r1
 8002086:	4281      	cmp	r1, r0
 8002088:	d34c      	bcc.n	8002124 <Ymodem_Transmit+0x1cc>
  if ( size  <= packet_size)
 800208a:	429a      	cmp	r2, r3
 800208c:	d808      	bhi.n	80020a0 <Ymodem_Transmit+0x148>
      p_packet[i] = 0x1A; /* EOF (0x1A) or 0x00 */
 800208e:	1a9a      	subs	r2, r3, r2
 8002090:	3304      	adds	r3, #4
 8002092:	4298      	cmp	r0, r3
 8002094:	bf88      	it	hi
 8002096:	2200      	movhi	r2, #0
 8002098:	211a      	movs	r1, #26
 800209a:	4428      	add	r0, r5
 800209c:	f000 f8e8 	bl	8002270 <memset>
    a_rx_ctrl[0] = 0;
 80020a0:	2700      	movs	r7, #0
      HAL_UART_Transmit(&huart2, &aPacketData[PACKET_START_INDEX], pkt_size + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 80020a2:	f8df b178 	ldr.w	fp, [pc, #376]	; 800221c <Ymodem_Transmit+0x2c4>
    a_rx_ctrl[0] = 0;
 80020a6:	f88d 700c 	strb.w	r7, [sp, #12]
        pkt_size = PACKET_SIZE;
 80020aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80020ae:	bf2c      	ite	cs
 80020b0:	f44f 6880 	movcs.w	r8, #1024	; 0x400
 80020b4:	f04f 0880 	movcc.w	r8, #128	; 0x80
      HAL_UART_Transmit(&huart2, &aPacketData[PACKET_START_INDEX], pkt_size + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 80020b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020bc:	f108 0203 	add.w	r2, r8, #3
 80020c0:	4958      	ldr	r1, [pc, #352]	; (8002224 <Ymodem_Transmit+0x2cc>)
 80020c2:	4658      	mov	r0, fp
 80020c4:	f7ff fb1a 	bl	80016fc <HAL_UART_Transmit>
      temp_crc = Cal_CRC16(&aPacketData[PACKET_DATA_INDEX], pkt_size);
 80020c8:	4641      	mov	r1, r8
 80020ca:	4855      	ldr	r0, [pc, #340]	; (8002220 <Ymodem_Transmit+0x2c8>)
 80020cc:	f7ff fe16 	bl	8001cfc <Cal_CRC16>
 80020d0:	4604      	mov	r4, r0
      Serial_PutByte(temp_crc >> 8);
 80020d2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80020d6:	f7ff fc3d 	bl	8001954 <Serial_PutByte>
      Serial_PutByte(temp_crc & 0xFF);
 80020da:	b2e0      	uxtb	r0, r4
 80020dc:	f7ff fc3a 	bl	8001954 <Serial_PutByte>
      if ((HAL_UART_Receive(&huart2, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == ACK))
 80020e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020e4:	2201      	movs	r2, #1
 80020e6:	a903      	add	r1, sp, #12
 80020e8:	4658      	mov	r0, fp
 80020ea:	f7ff fb5c 	bl	80017a6 <HAL_UART_Receive>
 80020ee:	4604      	mov	r4, r0
 80020f0:	b9e8      	cbnz	r0, 800212e <Ymodem_Transmit+0x1d6>
 80020f2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d119      	bne.n	800212e <Ymodem_Transmit+0x1d6>
          p_buf_int += pkt_size;
 80020fa:	9b01      	ldr	r3, [sp, #4]
        if (size > pkt_size)
 80020fc:	45b0      	cmp	r8, r6
          p_buf_int += pkt_size;
 80020fe:	4443      	add	r3, r8
 8002100:	9301      	str	r3, [sp, #4]
        if (size > pkt_size)
 8002102:	d219      	bcs.n	8002138 <Ymodem_Transmit+0x1e0>
          if (blk_number == (USER_FLASH_SIZE / PACKET_1K_SIZE))
 8002104:	f1ba 0f0c 	cmp.w	sl, #12
          size -= pkt_size;
 8002108:	eba6 0608 	sub.w	r6, r6, r8
          if (blk_number == (USER_FLASH_SIZE / PACKET_1K_SIZE))
 800210c:	d016      	beq.n	800213c <Ymodem_Transmit+0x1e4>
            blk_number++;
 800210e:	f10a 0a01 	add.w	sl, sl, #1
        result = COM_ERROR;
 8002112:	2f05      	cmp	r7, #5
 8002114:	bf28      	it	cs
 8002116:	2401      	movcs	r4, #1
 8002118:	e783      	b.n	8002022 <Ymodem_Transmit+0xca>
  size = size_blk < packet_size ? size_blk : packet_size;
 800211a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    p_packet[PACKET_START_INDEX] = STX;
 800211e:	2002      	movs	r0, #2
  packet_size = size_blk >= PACKET_1K_SIZE ? PACKET_1K_SIZE : PACKET_SIZE;
 8002120:	4613      	mov	r3, r2
 8002122:	e7a9      	b.n	8002078 <Ymodem_Transmit+0x120>
    p_packet[i] = *p_record++;
 8002124:	f814 7b01 	ldrb.w	r7, [r4], #1
 8002128:	546f      	strb	r7, [r5, r1]
  for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX;i++)
 800212a:	3101      	adds	r1, #1
 800212c:	e7ab      	b.n	8002086 <Ymodem_Transmit+0x12e>
        errors++;
 800212e:	3701      	adds	r7, #1
      if (errors >= MAX_ERRORS)
 8002130:	2f04      	cmp	r7, #4
 8002132:	d9ba      	bls.n	80020aa <Ymodem_Transmit+0x152>
        result = COM_ERROR;
 8002134:	2401      	movs	r4, #1
 8002136:	e774      	b.n	8002022 <Ymodem_Transmit+0xca>
          size = 0;
 8002138:	4606      	mov	r6, r0
 800213a:	e7ea      	b.n	8002112 <Ymodem_Transmit+0x1ba>
            result = COM_LIMIT; /* boundary error */
 800213c:	2405      	movs	r4, #5
 800213e:	e7e8      	b.n	8002112 <Ymodem_Transmit+0x1ba>
    Serial_PutByte(EOT);
 8002140:	2004      	movs	r0, #4
 8002142:	f7ff fc07 	bl	8001954 <Serial_PutByte>
    if (HAL_UART_Receive(&huart2, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8002146:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800214a:	2201      	movs	r2, #1
 800214c:	a903      	add	r1, sp, #12
 800214e:	4640      	mov	r0, r8
 8002150:	f7ff fb29 	bl	80017a6 <HAL_UART_Receive>
 8002154:	4607      	mov	r7, r0
 8002156:	b9e0      	cbnz	r0, 8002192 <Ymodem_Transmit+0x23a>
      if (a_rx_ctrl[0] == ACK)
 8002158:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800215c:	2b06      	cmp	r3, #6
 800215e:	d021      	beq.n	80021a4 <Ymodem_Transmit+0x24c>
      else if (a_rx_ctrl[0] == CA)
 8002160:	2b18      	cmp	r3, #24
 8002162:	d112      	bne.n	800218a <Ymodem_Transmit+0x232>
        if ((HAL_UART_Receive(&huart2, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == CA))
 8002164:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002168:	2201      	movs	r2, #1
 800216a:	a903      	add	r1, sp, #12
 800216c:	4640      	mov	r0, r8
 800216e:	f7ff fb1a 	bl	80017a6 <HAL_UART_Receive>
 8002172:	b950      	cbnz	r0, 800218a <Ymodem_Transmit+0x232>
 8002174:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002178:	2b18      	cmp	r3, #24
 800217a:	d106      	bne.n	800218a <Ymodem_Transmit+0x232>
          HAL_Delay( 2 );
 800217c:	2002      	movs	r0, #2
 800217e:	f7fe fbb9 	bl	80008f4 <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&huart2);
 8002182:	f8d9 3000 	ldr.w	r3, [r9]
 8002186:	685b      	ldr	r3, [r3, #4]
          result = COM_ABORT;
 8002188:	2702      	movs	r7, #2
    if (errors >=  MAX_ERRORS)
 800218a:	2e04      	cmp	r6, #4
 800218c:	d908      	bls.n	80021a0 <Ymodem_Transmit+0x248>
      result = COM_ERROR;
 800218e:	2401      	movs	r4, #1
  return result; /* file transmitted successfully */
 8002190:	e751      	b.n	8002036 <Ymodem_Transmit+0xde>
      errors++;
 8002192:	3601      	adds	r6, #1
 8002194:	4623      	mov	r3, r4
      result = COM_ERROR;
 8002196:	2e04      	cmp	r6, #4
 8002198:	bf94      	ite	ls
 800219a:	2700      	movls	r7, #0
 800219c:	2701      	movhi	r7, #1
  while (( !ack_recpt ) && ( result == COM_OK ))
 800219e:	b91b      	cbnz	r3, 80021a8 <Ymodem_Transmit+0x250>
  errors = 0;
 80021a0:	463c      	mov	r4, r7
 80021a2:	e745      	b.n	8002030 <Ymodem_Transmit+0xd8>
        ack_recpt = 1;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e7f6      	b.n	8002196 <Ymodem_Transmit+0x23e>
  if ( result == COM_OK )
 80021a8:	2e04      	cmp	r6, #4
 80021aa:	f04f 0601 	mov.w	r6, #1
 80021ae:	d8ee      	bhi.n	800218e <Ymodem_Transmit+0x236>
    aPacketData[PACKET_NUMBER_INDEX] = 0;
 80021b0:	2100      	movs	r1, #0
    aPacketData[PACKET_CNUMBER_INDEX] = 0xFF;
 80021b2:	23ff      	movs	r3, #255	; 0xff
    aPacketData[PACKET_NUMBER_INDEX] = 0;
 80021b4:	70a9      	strb	r1, [r5, #2]
    aPacketData[PACKET_CNUMBER_INDEX] = 0xFF;
 80021b6:	70eb      	strb	r3, [r5, #3]
    aPacketData[PACKET_START_INDEX] = SOH;
 80021b8:	706e      	strb	r6, [r5, #1]
      aPacketData [i] = 0x00;
 80021ba:	2280      	movs	r2, #128	; 0x80
 80021bc:	4818      	ldr	r0, [pc, #96]	; (8002220 <Ymodem_Transmit+0x2c8>)
 80021be:	f000 f857 	bl	8002270 <memset>
    HAL_UART_Transmit(&huart2, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 80021c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021c6:	2283      	movs	r2, #131	; 0x83
 80021c8:	4916      	ldr	r1, [pc, #88]	; (8002224 <Ymodem_Transmit+0x2cc>)
 80021ca:	4814      	ldr	r0, [pc, #80]	; (800221c <Ymodem_Transmit+0x2c4>)
 80021cc:	f7ff fa96 	bl	80016fc <HAL_UART_Transmit>
    temp_crc = Cal_CRC16(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 80021d0:	2180      	movs	r1, #128	; 0x80
 80021d2:	4813      	ldr	r0, [pc, #76]	; (8002220 <Ymodem_Transmit+0x2c8>)
 80021d4:	f7ff fd92 	bl	8001cfc <Cal_CRC16>
 80021d8:	4605      	mov	r5, r0
    Serial_PutByte(temp_crc >> 8);
 80021da:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80021de:	f7ff fbb9 	bl	8001954 <Serial_PutByte>
    Serial_PutByte(temp_crc & 0xFF);
 80021e2:	b2e8      	uxtb	r0, r5
 80021e4:	f7ff fbb6 	bl	8001954 <Serial_PutByte>
    if (HAL_UART_Receive(&huart2, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 80021e8:	480c      	ldr	r0, [pc, #48]	; (800221c <Ymodem_Transmit+0x2c4>)
 80021ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021ee:	4632      	mov	r2, r6
 80021f0:	a903      	add	r1, sp, #12
 80021f2:	f7ff fad8 	bl	80017a6 <HAL_UART_Receive>
 80021f6:	2800      	cmp	r0, #0
 80021f8:	f47f af1d 	bne.w	8002036 <Ymodem_Transmit+0xde>
      if (a_rx_ctrl[0] == CA)
 80021fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002200:	2b18      	cmp	r3, #24
 8002202:	d107      	bne.n	8002214 <Ymodem_Transmit+0x2bc>
          HAL_Delay( 2 );
 8002204:	2002      	movs	r0, #2
 8002206:	f7fe fb75 	bl	80008f4 <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&huart2);
 800220a:	f8d9 3000 	ldr.w	r3, [r9]
          result = COM_ABORT;
 800220e:	2402      	movs	r4, #2
          __HAL_UART_FLUSH_DRREGISTER(&huart2);
 8002210:	685b      	ldr	r3, [r3, #4]
          result = COM_ABORT;
 8002212:	e710      	b.n	8002036 <Ymodem_Transmit+0xde>
 8002214:	4604      	mov	r4, r0
 8002216:	e70e      	b.n	8002036 <Ymodem_Transmit+0xde>
 8002218:	200000f4 	.word	0x200000f4
 800221c:	20000040 	.word	0x20000040
 8002220:	200000f8 	.word	0x200000f8
 8002224:	200000f5 	.word	0x200000f5

08002228 <__libc_init_array>:
 8002228:	b570      	push	{r4, r5, r6, lr}
 800222a:	4d0d      	ldr	r5, [pc, #52]	; (8002260 <__libc_init_array+0x38>)
 800222c:	4c0d      	ldr	r4, [pc, #52]	; (8002264 <__libc_init_array+0x3c>)
 800222e:	1b64      	subs	r4, r4, r5
 8002230:	10a4      	asrs	r4, r4, #2
 8002232:	2600      	movs	r6, #0
 8002234:	42a6      	cmp	r6, r4
 8002236:	d109      	bne.n	800224c <__libc_init_array+0x24>
 8002238:	4d0b      	ldr	r5, [pc, #44]	; (8002268 <__libc_init_array+0x40>)
 800223a:	4c0c      	ldr	r4, [pc, #48]	; (800226c <__libc_init_array+0x44>)
 800223c:	f000 f820 	bl	8002280 <_init>
 8002240:	1b64      	subs	r4, r4, r5
 8002242:	10a4      	asrs	r4, r4, #2
 8002244:	2600      	movs	r6, #0
 8002246:	42a6      	cmp	r6, r4
 8002248:	d105      	bne.n	8002256 <__libc_init_array+0x2e>
 800224a:	bd70      	pop	{r4, r5, r6, pc}
 800224c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002250:	4798      	blx	r3
 8002252:	3601      	adds	r6, #1
 8002254:	e7ee      	b.n	8002234 <__libc_init_array+0xc>
 8002256:	f855 3b04 	ldr.w	r3, [r5], #4
 800225a:	4798      	blx	r3
 800225c:	3601      	adds	r6, #1
 800225e:	e7f2      	b.n	8002246 <__libc_init_array+0x1e>
 8002260:	08002900 	.word	0x08002900
 8002264:	08002900 	.word	0x08002900
 8002268:	08002900 	.word	0x08002900
 800226c:	08002904 	.word	0x08002904

08002270 <memset>:
 8002270:	4402      	add	r2, r0
 8002272:	4603      	mov	r3, r0
 8002274:	4293      	cmp	r3, r2
 8002276:	d100      	bne.n	800227a <memset+0xa>
 8002278:	4770      	bx	lr
 800227a:	f803 1b01 	strb.w	r1, [r3], #1
 800227e:	e7f9      	b.n	8002274 <memset+0x4>

08002280 <_init>:
 8002280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002282:	bf00      	nop
 8002284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002286:	bc08      	pop	{r3}
 8002288:	469e      	mov	lr, r3
 800228a:	4770      	bx	lr

0800228c <_fini>:
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228e:	bf00      	nop
 8002290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002292:	bc08      	pop	{r3}
 8002294:	469e      	mov	lr, r3
 8002296:	4770      	bx	lr
